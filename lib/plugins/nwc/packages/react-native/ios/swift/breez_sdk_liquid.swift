// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(breez_sdk_liquidFFI)
import breez_sdk_liquidFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_breez_sdk_liquid_bindings_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_breez_sdk_liquid_bindings_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol BindingLiquidSdkProtocol : AnyObject {
    
    func acceptPaymentProposedFees(req: AcceptPaymentProposedFeesRequest) throws 
    
    func addEventListener(listener: EventListener) throws  -> String
    
    func backup(req: BackupRequest) throws 
    
    func buyBitcoin(req: BuyBitcoinRequest) throws  -> String
    
    func checkMessage(req: CheckMessageRequest) throws  -> CheckMessageResponse
    
    func createBolt12Invoice(req: CreateBolt12InvoiceRequest) throws  -> CreateBolt12InvoiceResponse
    
    func disconnect() throws 
    
    func fetchFiatRates() throws  -> [Rate]
    
    func fetchLightningLimits() throws  -> LightningPaymentLimitsResponse
    
    func fetchOnchainLimits() throws  -> OnchainPaymentLimitsResponse
    
    func fetchPaymentProposedFees(req: FetchPaymentProposedFeesRequest) throws  -> FetchPaymentProposedFeesResponse
    
    func getInfo() throws  -> GetInfoResponse
    
    func getPayment(req: GetPaymentRequest) throws  -> Payment?
    
    func listFiatCurrencies() throws  -> [FiatCurrency]
    
    func listPayments(req: ListPaymentsRequest) throws  -> [Payment]
    
    func listRefundables() throws  -> [RefundableSwap]
    
    func lnurlAuth(reqData: LnUrlAuthRequestData) throws  -> LnUrlCallbackStatus
    
    func lnurlPay(req: LnUrlPayRequest) throws  -> LnUrlPayResult
    
    func lnurlWithdraw(req: LnUrlWithdrawRequest) throws  -> LnUrlWithdrawResult
    
    func parse(input: String) throws  -> InputType
    
    func payOnchain(req: PayOnchainRequest) throws  -> SendPaymentResponse
    
    func prepareBuyBitcoin(req: PrepareBuyBitcoinRequest) throws  -> PrepareBuyBitcoinResponse
    
    func prepareLnurlPay(req: PrepareLnUrlPayRequest) throws  -> PrepareLnUrlPayResponse
    
    func preparePayOnchain(req: PreparePayOnchainRequest) throws  -> PreparePayOnchainResponse
    
    func prepareReceivePayment(req: PrepareReceiveRequest) throws  -> PrepareReceiveResponse
    
    func prepareRefund(req: PrepareRefundRequest) throws  -> PrepareRefundResponse
    
    func prepareSendPayment(req: PrepareSendRequest) throws  -> PrepareSendResponse
    
    func receivePayment(req: ReceivePaymentRequest) throws  -> ReceivePaymentResponse
    
    func recommendedFees() throws  -> RecommendedFees
    
    func refund(req: RefundRequest) throws  -> RefundResponse
    
    func registerWebhook(webhookUrl: String) throws 
    
    func removeEventListener(id: String) throws 
    
    func rescanOnchainSwaps() throws 
    
    func restore(req: RestoreRequest) throws 
    
    func sendPayment(req: SendPaymentRequest) throws  -> SendPaymentResponse
    
    func signMessage(req: SignMessageRequest) throws  -> SignMessageResponse
    
    func sync() throws 
    
    func unregisterWebhook() throws 
    
}

open class BindingLiquidSdk:
    BindingLiquidSdkProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_breez_sdk_liquid_bindings_fn_clone_bindingliquidsdk(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_breez_sdk_liquid_bindings_fn_free_bindingliquidsdk(pointer, $0) }
    }

    

    
open func acceptPaymentProposedFees(req: AcceptPaymentProposedFeesRequest)throws  {try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_accept_payment_proposed_fees(self.uniffiClonePointer(),
        FfiConverterTypeAcceptPaymentProposedFeesRequest.lower(req),$0
    )
}
}
    
open func addEventListener(listener: EventListener)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_add_event_listener(self.uniffiClonePointer(),
        FfiConverterCallbackInterfaceEventListener.lower(listener),$0
    )
})
}
    
open func backup(req: BackupRequest)throws  {try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_backup(self.uniffiClonePointer(),
        FfiConverterTypeBackupRequest.lower(req),$0
    )
}
}
    
open func buyBitcoin(req: BuyBitcoinRequest)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_buy_bitcoin(self.uniffiClonePointer(),
        FfiConverterTypeBuyBitcoinRequest.lower(req),$0
    )
})
}
    
open func checkMessage(req: CheckMessageRequest)throws  -> CheckMessageResponse {
    return try  FfiConverterTypeCheckMessageResponse.lift(try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_check_message(self.uniffiClonePointer(),
        FfiConverterTypeCheckMessageRequest.lower(req),$0
    )
})
}
    
open func createBolt12Invoice(req: CreateBolt12InvoiceRequest)throws  -> CreateBolt12InvoiceResponse {
    return try  FfiConverterTypeCreateBolt12InvoiceResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_create_bolt12_invoice(self.uniffiClonePointer(),
        FfiConverterTypeCreateBolt12InvoiceRequest.lower(req),$0
    )
})
}
    
open func disconnect()throws  {try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_disconnect(self.uniffiClonePointer(),$0
    )
}
}
    
open func fetchFiatRates()throws  -> [Rate] {
    return try  FfiConverterSequenceTypeRate.lift(try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_fetch_fiat_rates(self.uniffiClonePointer(),$0
    )
})
}
    
open func fetchLightningLimits()throws  -> LightningPaymentLimitsResponse {
    return try  FfiConverterTypeLightningPaymentLimitsResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_fetch_lightning_limits(self.uniffiClonePointer(),$0
    )
})
}
    
open func fetchOnchainLimits()throws  -> OnchainPaymentLimitsResponse {
    return try  FfiConverterTypeOnchainPaymentLimitsResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_fetch_onchain_limits(self.uniffiClonePointer(),$0
    )
})
}
    
open func fetchPaymentProposedFees(req: FetchPaymentProposedFeesRequest)throws  -> FetchPaymentProposedFeesResponse {
    return try  FfiConverterTypeFetchPaymentProposedFeesResponse.lift(try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_fetch_payment_proposed_fees(self.uniffiClonePointer(),
        FfiConverterTypeFetchPaymentProposedFeesRequest.lower(req),$0
    )
})
}
    
open func getInfo()throws  -> GetInfoResponse {
    return try  FfiConverterTypeGetInfoResponse.lift(try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_get_info(self.uniffiClonePointer(),$0
    )
})
}
    
open func getPayment(req: GetPaymentRequest)throws  -> Payment? {
    return try  FfiConverterOptionTypePayment.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_get_payment(self.uniffiClonePointer(),
        FfiConverterTypeGetPaymentRequest.lower(req),$0
    )
})
}
    
open func listFiatCurrencies()throws  -> [FiatCurrency] {
    return try  FfiConverterSequenceTypeFiatCurrency.lift(try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_list_fiat_currencies(self.uniffiClonePointer(),$0
    )
})
}
    
open func listPayments(req: ListPaymentsRequest)throws  -> [Payment] {
    return try  FfiConverterSequenceTypePayment.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_list_payments(self.uniffiClonePointer(),
        FfiConverterTypeListPaymentsRequest.lower(req),$0
    )
})
}
    
open func listRefundables()throws  -> [RefundableSwap] {
    return try  FfiConverterSequenceTypeRefundableSwap.lift(try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_list_refundables(self.uniffiClonePointer(),$0
    )
})
}
    
open func lnurlAuth(reqData: LnUrlAuthRequestData)throws  -> LnUrlCallbackStatus {
    return try  FfiConverterTypeLnUrlCallbackStatus.lift(try rustCallWithError(FfiConverterTypeLnUrlAuthError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_lnurl_auth(self.uniffiClonePointer(),
        FfiConverterTypeLnUrlAuthRequestData.lower(reqData),$0
    )
})
}
    
open func lnurlPay(req: LnUrlPayRequest)throws  -> LnUrlPayResult {
    return try  FfiConverterTypeLnUrlPayResult.lift(try rustCallWithError(FfiConverterTypeLnUrlPayError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_lnurl_pay(self.uniffiClonePointer(),
        FfiConverterTypeLnUrlPayRequest.lower(req),$0
    )
})
}
    
open func lnurlWithdraw(req: LnUrlWithdrawRequest)throws  -> LnUrlWithdrawResult {
    return try  FfiConverterTypeLnUrlWithdrawResult.lift(try rustCallWithError(FfiConverterTypeLnUrlWithdrawError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_lnurl_withdraw(self.uniffiClonePointer(),
        FfiConverterTypeLnUrlWithdrawRequest.lower(req),$0
    )
})
}
    
open func parse(input: String)throws  -> InputType {
    return try  FfiConverterTypeInputType.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_parse(self.uniffiClonePointer(),
        FfiConverterString.lower(input),$0
    )
})
}
    
open func payOnchain(req: PayOnchainRequest)throws  -> SendPaymentResponse {
    return try  FfiConverterTypeSendPaymentResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_pay_onchain(self.uniffiClonePointer(),
        FfiConverterTypePayOnchainRequest.lower(req),$0
    )
})
}
    
open func prepareBuyBitcoin(req: PrepareBuyBitcoinRequest)throws  -> PrepareBuyBitcoinResponse {
    return try  FfiConverterTypePrepareBuyBitcoinResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_prepare_buy_bitcoin(self.uniffiClonePointer(),
        FfiConverterTypePrepareBuyBitcoinRequest.lower(req),$0
    )
})
}
    
open func prepareLnurlPay(req: PrepareLnUrlPayRequest)throws  -> PrepareLnUrlPayResponse {
    return try  FfiConverterTypePrepareLnUrlPayResponse.lift(try rustCallWithError(FfiConverterTypeLnUrlPayError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_prepare_lnurl_pay(self.uniffiClonePointer(),
        FfiConverterTypePrepareLnUrlPayRequest.lower(req),$0
    )
})
}
    
open func preparePayOnchain(req: PreparePayOnchainRequest)throws  -> PreparePayOnchainResponse {
    return try  FfiConverterTypePreparePayOnchainResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_prepare_pay_onchain(self.uniffiClonePointer(),
        FfiConverterTypePreparePayOnchainRequest.lower(req),$0
    )
})
}
    
open func prepareReceivePayment(req: PrepareReceiveRequest)throws  -> PrepareReceiveResponse {
    return try  FfiConverterTypePrepareReceiveResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_prepare_receive_payment(self.uniffiClonePointer(),
        FfiConverterTypePrepareReceiveRequest.lower(req),$0
    )
})
}
    
open func prepareRefund(req: PrepareRefundRequest)throws  -> PrepareRefundResponse {
    return try  FfiConverterTypePrepareRefundResponse.lift(try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_prepare_refund(self.uniffiClonePointer(),
        FfiConverterTypePrepareRefundRequest.lower(req),$0
    )
})
}
    
open func prepareSendPayment(req: PrepareSendRequest)throws  -> PrepareSendResponse {
    return try  FfiConverterTypePrepareSendResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_prepare_send_payment(self.uniffiClonePointer(),
        FfiConverterTypePrepareSendRequest.lower(req),$0
    )
})
}
    
open func receivePayment(req: ReceivePaymentRequest)throws  -> ReceivePaymentResponse {
    return try  FfiConverterTypeReceivePaymentResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_receive_payment(self.uniffiClonePointer(),
        FfiConverterTypeReceivePaymentRequest.lower(req),$0
    )
})
}
    
open func recommendedFees()throws  -> RecommendedFees {
    return try  FfiConverterTypeRecommendedFees.lift(try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_recommended_fees(self.uniffiClonePointer(),$0
    )
})
}
    
open func refund(req: RefundRequest)throws  -> RefundResponse {
    return try  FfiConverterTypeRefundResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_refund(self.uniffiClonePointer(),
        FfiConverterTypeRefundRequest.lower(req),$0
    )
})
}
    
open func registerWebhook(webhookUrl: String)throws  {try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_register_webhook(self.uniffiClonePointer(),
        FfiConverterString.lower(webhookUrl),$0
    )
}
}
    
open func removeEventListener(id: String)throws  {try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_remove_event_listener(self.uniffiClonePointer(),
        FfiConverterString.lower(id),$0
    )
}
}
    
open func rescanOnchainSwaps()throws  {try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_rescan_onchain_swaps(self.uniffiClonePointer(),$0
    )
}
}
    
open func restore(req: RestoreRequest)throws  {try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_restore(self.uniffiClonePointer(),
        FfiConverterTypeRestoreRequest.lower(req),$0
    )
}
}
    
open func sendPayment(req: SendPaymentRequest)throws  -> SendPaymentResponse {
    return try  FfiConverterTypeSendPaymentResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_send_payment(self.uniffiClonePointer(),
        FfiConverterTypeSendPaymentRequest.lower(req),$0
    )
})
}
    
open func signMessage(req: SignMessageRequest)throws  -> SignMessageResponse {
    return try  FfiConverterTypeSignMessageResponse.lift(try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_sign_message(self.uniffiClonePointer(),
        FfiConverterTypeSignMessageRequest.lower(req),$0
    )
})
}
    
open func sync()throws  {try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_sync(self.uniffiClonePointer(),$0
    )
}
}
    
open func unregisterWebhook()throws  {try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_bindingliquidsdk_unregister_webhook(self.uniffiClonePointer(),$0
    )
}
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBindingLiquidSdk: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BindingLiquidSdk

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BindingLiquidSdk {
        return BindingLiquidSdk(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BindingLiquidSdk) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BindingLiquidSdk {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BindingLiquidSdk, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBindingLiquidSdk_lift(_ pointer: UnsafeMutableRawPointer) throws -> BindingLiquidSdk {
    return try FfiConverterTypeBindingLiquidSdk.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBindingLiquidSdk_lower(_ value: BindingLiquidSdk) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBindingLiquidSdk.lower(value)
}




public protocol PluginEventEmitterProtocol : AnyObject {
    
    func broadcast(event: SdkEvent) 
    
}

open class PluginEventEmitter:
    PluginEventEmitterProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_breez_sdk_liquid_bindings_fn_clone_plugineventemitter(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_breez_sdk_liquid_bindings_fn_free_plugineventemitter(pointer, $0) }
    }

    

    
open func broadcast(event: SdkEvent) {try! rustCall() {
    uniffi_breez_sdk_liquid_bindings_fn_method_plugineventemitter_broadcast(self.uniffiClonePointer(),
        FfiConverterTypeSdkEvent.lower(event),$0
    )
}
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePluginEventEmitter: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PluginEventEmitter

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PluginEventEmitter {
        return PluginEventEmitter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PluginEventEmitter) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PluginEventEmitter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PluginEventEmitter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePluginEventEmitter_lift(_ pointer: UnsafeMutableRawPointer) throws -> PluginEventEmitter {
    return try FfiConverterTypePluginEventEmitter.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePluginEventEmitter_lower(_ value: PluginEventEmitter) -> UnsafeMutableRawPointer {
    return FfiConverterTypePluginEventEmitter.lower(value)
}




public protocol PluginStorageProtocol : AnyObject {
    
    func getItem(key: String) throws  -> String?
    
    func removeItem(key: String) throws 
    
    func setItem(key: String, value: String) throws 
    
}

open class PluginStorage:
    PluginStorageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_breez_sdk_liquid_bindings_fn_clone_pluginstorage(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_breez_sdk_liquid_bindings_fn_free_pluginstorage(pointer, $0) }
    }

    

    
open func getItem(key: String)throws  -> String? {
    return try  FfiConverterOptionString.lift(try rustCallWithError(FfiConverterTypePluginStorageError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_pluginstorage_get_item(self.uniffiClonePointer(),
        FfiConverterString.lower(key),$0
    )
})
}
    
open func removeItem(key: String)throws  {try rustCallWithError(FfiConverterTypePluginStorageError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_pluginstorage_remove_item(self.uniffiClonePointer(),
        FfiConverterString.lower(key),$0
    )
}
}
    
open func setItem(key: String, value: String)throws  {try rustCallWithError(FfiConverterTypePluginStorageError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_method_pluginstorage_set_item(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterString.lower(value),$0
    )
}
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePluginStorage: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PluginStorage

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PluginStorage {
        return PluginStorage(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PluginStorage) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PluginStorage {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PluginStorage, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePluginStorage_lift(_ pointer: UnsafeMutableRawPointer) throws -> PluginStorage {
    return try FfiConverterTypePluginStorage.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePluginStorage_lower(_ value: PluginStorage) -> UnsafeMutableRawPointer {
    return FfiConverterTypePluginStorage.lower(value)
}


public struct AcceptPaymentProposedFeesRequest {
    public var response: FetchPaymentProposedFeesResponse

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(response: FetchPaymentProposedFeesResponse) {
        self.response = response
    }
}



extension AcceptPaymentProposedFeesRequest: Equatable, Hashable {
    public static func ==(lhs: AcceptPaymentProposedFeesRequest, rhs: AcceptPaymentProposedFeesRequest) -> Bool {
        if lhs.response != rhs.response {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(response)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAcceptPaymentProposedFeesRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AcceptPaymentProposedFeesRequest {
        return
            try AcceptPaymentProposedFeesRequest(
                response: FfiConverterTypeFetchPaymentProposedFeesResponse.read(from: &buf)
        )
    }

    public static func write(_ value: AcceptPaymentProposedFeesRequest, into buf: inout [UInt8]) {
        FfiConverterTypeFetchPaymentProposedFeesResponse.write(value.response, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAcceptPaymentProposedFeesRequest_lift(_ buf: RustBuffer) throws -> AcceptPaymentProposedFeesRequest {
    return try FfiConverterTypeAcceptPaymentProposedFeesRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAcceptPaymentProposedFeesRequest_lower(_ value: AcceptPaymentProposedFeesRequest) -> RustBuffer {
    return FfiConverterTypeAcceptPaymentProposedFeesRequest.lower(value)
}


public struct AesSuccessActionData {
    public var description: String
    public var ciphertext: String
    public var iv: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(description: String, ciphertext: String, iv: String) {
        self.description = description
        self.ciphertext = ciphertext
        self.iv = iv
    }
}



extension AesSuccessActionData: Equatable, Hashable {
    public static func ==(lhs: AesSuccessActionData, rhs: AesSuccessActionData) -> Bool {
        if lhs.description != rhs.description {
            return false
        }
        if lhs.ciphertext != rhs.ciphertext {
            return false
        }
        if lhs.iv != rhs.iv {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(description)
        hasher.combine(ciphertext)
        hasher.combine(iv)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAesSuccessActionData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AesSuccessActionData {
        return
            try AesSuccessActionData(
                description: FfiConverterString.read(from: &buf), 
                ciphertext: FfiConverterString.read(from: &buf), 
                iv: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AesSuccessActionData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.description, into: &buf)
        FfiConverterString.write(value.ciphertext, into: &buf)
        FfiConverterString.write(value.iv, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAesSuccessActionData_lift(_ buf: RustBuffer) throws -> AesSuccessActionData {
    return try FfiConverterTypeAesSuccessActionData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAesSuccessActionData_lower(_ value: AesSuccessActionData) -> RustBuffer {
    return FfiConverterTypeAesSuccessActionData.lower(value)
}


public struct AesSuccessActionDataDecrypted {
    public var description: String
    public var plaintext: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(description: String, plaintext: String) {
        self.description = description
        self.plaintext = plaintext
    }
}



extension AesSuccessActionDataDecrypted: Equatable, Hashable {
    public static func ==(lhs: AesSuccessActionDataDecrypted, rhs: AesSuccessActionDataDecrypted) -> Bool {
        if lhs.description != rhs.description {
            return false
        }
        if lhs.plaintext != rhs.plaintext {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(description)
        hasher.combine(plaintext)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAesSuccessActionDataDecrypted: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AesSuccessActionDataDecrypted {
        return
            try AesSuccessActionDataDecrypted(
                description: FfiConverterString.read(from: &buf), 
                plaintext: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AesSuccessActionDataDecrypted, into buf: inout [UInt8]) {
        FfiConverterString.write(value.description, into: &buf)
        FfiConverterString.write(value.plaintext, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAesSuccessActionDataDecrypted_lift(_ buf: RustBuffer) throws -> AesSuccessActionDataDecrypted {
    return try FfiConverterTypeAesSuccessActionDataDecrypted.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAesSuccessActionDataDecrypted_lower(_ value: AesSuccessActionDataDecrypted) -> RustBuffer {
    return FfiConverterTypeAesSuccessActionDataDecrypted.lower(value)
}


public struct AssetBalance {
    public var assetId: String
    public var balanceSat: UInt64
    public var name: String?
    public var ticker: String?
    public var balance: Double?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(assetId: String, balanceSat: UInt64, name: String?, ticker: String?, balance: Double?) {
        self.assetId = assetId
        self.balanceSat = balanceSat
        self.name = name
        self.ticker = ticker
        self.balance = balance
    }
}



extension AssetBalance: Equatable, Hashable {
    public static func ==(lhs: AssetBalance, rhs: AssetBalance) -> Bool {
        if lhs.assetId != rhs.assetId {
            return false
        }
        if lhs.balanceSat != rhs.balanceSat {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.ticker != rhs.ticker {
            return false
        }
        if lhs.balance != rhs.balance {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(assetId)
        hasher.combine(balanceSat)
        hasher.combine(name)
        hasher.combine(ticker)
        hasher.combine(balance)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAssetBalance: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AssetBalance {
        return
            try AssetBalance(
                assetId: FfiConverterString.read(from: &buf), 
                balanceSat: FfiConverterUInt64.read(from: &buf), 
                name: FfiConverterOptionString.read(from: &buf), 
                ticker: FfiConverterOptionString.read(from: &buf), 
                balance: FfiConverterOptionDouble.read(from: &buf)
        )
    }

    public static func write(_ value: AssetBalance, into buf: inout [UInt8]) {
        FfiConverterString.write(value.assetId, into: &buf)
        FfiConverterUInt64.write(value.balanceSat, into: &buf)
        FfiConverterOptionString.write(value.name, into: &buf)
        FfiConverterOptionString.write(value.ticker, into: &buf)
        FfiConverterOptionDouble.write(value.balance, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetBalance_lift(_ buf: RustBuffer) throws -> AssetBalance {
    return try FfiConverterTypeAssetBalance.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetBalance_lower(_ value: AssetBalance) -> RustBuffer {
    return FfiConverterTypeAssetBalance.lower(value)
}


public struct AssetInfo {
    public var name: String
    public var ticker: String
    public var amount: Double
    public var fees: Double?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, ticker: String, amount: Double, fees: Double?) {
        self.name = name
        self.ticker = ticker
        self.amount = amount
        self.fees = fees
    }
}



extension AssetInfo: Equatable, Hashable {
    public static func ==(lhs: AssetInfo, rhs: AssetInfo) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.ticker != rhs.ticker {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.fees != rhs.fees {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(ticker)
        hasher.combine(amount)
        hasher.combine(fees)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAssetInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AssetInfo {
        return
            try AssetInfo(
                name: FfiConverterString.read(from: &buf), 
                ticker: FfiConverterString.read(from: &buf), 
                amount: FfiConverterDouble.read(from: &buf), 
                fees: FfiConverterOptionDouble.read(from: &buf)
        )
    }

    public static func write(_ value: AssetInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.ticker, into: &buf)
        FfiConverterDouble.write(value.amount, into: &buf)
        FfiConverterOptionDouble.write(value.fees, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetInfo_lift(_ buf: RustBuffer) throws -> AssetInfo {
    return try FfiConverterTypeAssetInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetInfo_lower(_ value: AssetInfo) -> RustBuffer {
    return FfiConverterTypeAssetInfo.lower(value)
}


public struct AssetMetadata {
    public var assetId: String
    public var name: String
    public var ticker: String
    public var precision: UInt8
    public var fiatId: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(assetId: String, name: String, ticker: String, precision: UInt8, fiatId: String? = nil) {
        self.assetId = assetId
        self.name = name
        self.ticker = ticker
        self.precision = precision
        self.fiatId = fiatId
    }
}



extension AssetMetadata: Equatable, Hashable {
    public static func ==(lhs: AssetMetadata, rhs: AssetMetadata) -> Bool {
        if lhs.assetId != rhs.assetId {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.ticker != rhs.ticker {
            return false
        }
        if lhs.precision != rhs.precision {
            return false
        }
        if lhs.fiatId != rhs.fiatId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(assetId)
        hasher.combine(name)
        hasher.combine(ticker)
        hasher.combine(precision)
        hasher.combine(fiatId)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAssetMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AssetMetadata {
        return
            try AssetMetadata(
                assetId: FfiConverterString.read(from: &buf), 
                name: FfiConverterString.read(from: &buf), 
                ticker: FfiConverterString.read(from: &buf), 
                precision: FfiConverterUInt8.read(from: &buf), 
                fiatId: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: AssetMetadata, into buf: inout [UInt8]) {
        FfiConverterString.write(value.assetId, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.ticker, into: &buf)
        FfiConverterUInt8.write(value.precision, into: &buf)
        FfiConverterOptionString.write(value.fiatId, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetMetadata_lift(_ buf: RustBuffer) throws -> AssetMetadata {
    return try FfiConverterTypeAssetMetadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetMetadata_lower(_ value: AssetMetadata) -> RustBuffer {
    return FfiConverterTypeAssetMetadata.lower(value)
}


public struct BackupRequest {
    public var backupPath: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(backupPath: String? = nil) {
        self.backupPath = backupPath
    }
}



extension BackupRequest: Equatable, Hashable {
    public static func ==(lhs: BackupRequest, rhs: BackupRequest) -> Bool {
        if lhs.backupPath != rhs.backupPath {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(backupPath)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBackupRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BackupRequest {
        return
            try BackupRequest(
                backupPath: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: BackupRequest, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.backupPath, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBackupRequest_lift(_ buf: RustBuffer) throws -> BackupRequest {
    return try FfiConverterTypeBackupRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBackupRequest_lower(_ value: BackupRequest) -> RustBuffer {
    return FfiConverterTypeBackupRequest.lower(value)
}


public struct BitcoinAddressData {
    public var address: String
    public var network: Network
    public var amountSat: UInt64?
    public var label: String?
    public var message: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, network: Network, amountSat: UInt64?, label: String?, message: String?) {
        self.address = address
        self.network = network
        self.amountSat = amountSat
        self.label = label
        self.message = message
    }
}



extension BitcoinAddressData: Equatable, Hashable {
    public static func ==(lhs: BitcoinAddressData, rhs: BitcoinAddressData) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        if lhs.amountSat != rhs.amountSat {
            return false
        }
        if lhs.label != rhs.label {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(network)
        hasher.combine(amountSat)
        hasher.combine(label)
        hasher.combine(message)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBitcoinAddressData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BitcoinAddressData {
        return
            try BitcoinAddressData(
                address: FfiConverterString.read(from: &buf), 
                network: FfiConverterTypeNetwork.read(from: &buf), 
                amountSat: FfiConverterOptionUInt64.read(from: &buf), 
                label: FfiConverterOptionString.read(from: &buf), 
                message: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: BitcoinAddressData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterTypeNetwork.write(value.network, into: &buf)
        FfiConverterOptionUInt64.write(value.amountSat, into: &buf)
        FfiConverterOptionString.write(value.label, into: &buf)
        FfiConverterOptionString.write(value.message, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBitcoinAddressData_lift(_ buf: RustBuffer) throws -> BitcoinAddressData {
    return try FfiConverterTypeBitcoinAddressData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBitcoinAddressData_lower(_ value: BitcoinAddressData) -> RustBuffer {
    return FfiConverterTypeBitcoinAddressData.lower(value)
}


public struct BlockchainInfo {
    public var liquidTip: UInt32
    public var bitcoinTip: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(liquidTip: UInt32, bitcoinTip: UInt32) {
        self.liquidTip = liquidTip
        self.bitcoinTip = bitcoinTip
    }
}



extension BlockchainInfo: Equatable, Hashable {
    public static func ==(lhs: BlockchainInfo, rhs: BlockchainInfo) -> Bool {
        if lhs.liquidTip != rhs.liquidTip {
            return false
        }
        if lhs.bitcoinTip != rhs.bitcoinTip {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(liquidTip)
        hasher.combine(bitcoinTip)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBlockchainInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlockchainInfo {
        return
            try BlockchainInfo(
                liquidTip: FfiConverterUInt32.read(from: &buf), 
                bitcoinTip: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: BlockchainInfo, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.liquidTip, into: &buf)
        FfiConverterUInt32.write(value.bitcoinTip, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlockchainInfo_lift(_ buf: RustBuffer) throws -> BlockchainInfo {
    return try FfiConverterTypeBlockchainInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlockchainInfo_lower(_ value: BlockchainInfo) -> RustBuffer {
    return FfiConverterTypeBlockchainInfo.lower(value)
}


public struct BuyBitcoinRequest {
    public var prepareResponse: PrepareBuyBitcoinResponse
    public var redirectUrl: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(prepareResponse: PrepareBuyBitcoinResponse, redirectUrl: String? = nil) {
        self.prepareResponse = prepareResponse
        self.redirectUrl = redirectUrl
    }
}



extension BuyBitcoinRequest: Equatable, Hashable {
    public static func ==(lhs: BuyBitcoinRequest, rhs: BuyBitcoinRequest) -> Bool {
        if lhs.prepareResponse != rhs.prepareResponse {
            return false
        }
        if lhs.redirectUrl != rhs.redirectUrl {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(prepareResponse)
        hasher.combine(redirectUrl)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBuyBitcoinRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BuyBitcoinRequest {
        return
            try BuyBitcoinRequest(
                prepareResponse: FfiConverterTypePrepareBuyBitcoinResponse.read(from: &buf), 
                redirectUrl: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: BuyBitcoinRequest, into buf: inout [UInt8]) {
        FfiConverterTypePrepareBuyBitcoinResponse.write(value.prepareResponse, into: &buf)
        FfiConverterOptionString.write(value.redirectUrl, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBuyBitcoinRequest_lift(_ buf: RustBuffer) throws -> BuyBitcoinRequest {
    return try FfiConverterTypeBuyBitcoinRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBuyBitcoinRequest_lower(_ value: BuyBitcoinRequest) -> RustBuffer {
    return FfiConverterTypeBuyBitcoinRequest.lower(value)
}


public struct CheckMessageRequest {
    public var message: String
    public var pubkey: String
    public var signature: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(message: String, pubkey: String, signature: String) {
        self.message = message
        self.pubkey = pubkey
        self.signature = signature
    }
}



extension CheckMessageRequest: Equatable, Hashable {
    public static func ==(lhs: CheckMessageRequest, rhs: CheckMessageRequest) -> Bool {
        if lhs.message != rhs.message {
            return false
        }
        if lhs.pubkey != rhs.pubkey {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(message)
        hasher.combine(pubkey)
        hasher.combine(signature)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCheckMessageRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CheckMessageRequest {
        return
            try CheckMessageRequest(
                message: FfiConverterString.read(from: &buf), 
                pubkey: FfiConverterString.read(from: &buf), 
                signature: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: CheckMessageRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.message, into: &buf)
        FfiConverterString.write(value.pubkey, into: &buf)
        FfiConverterString.write(value.signature, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCheckMessageRequest_lift(_ buf: RustBuffer) throws -> CheckMessageRequest {
    return try FfiConverterTypeCheckMessageRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCheckMessageRequest_lower(_ value: CheckMessageRequest) -> RustBuffer {
    return FfiConverterTypeCheckMessageRequest.lower(value)
}


public struct CheckMessageResponse {
    public var isValid: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(isValid: Bool) {
        self.isValid = isValid
    }
}



extension CheckMessageResponse: Equatable, Hashable {
    public static func ==(lhs: CheckMessageResponse, rhs: CheckMessageResponse) -> Bool {
        if lhs.isValid != rhs.isValid {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(isValid)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCheckMessageResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CheckMessageResponse {
        return
            try CheckMessageResponse(
                isValid: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: CheckMessageResponse, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.isValid, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCheckMessageResponse_lift(_ buf: RustBuffer) throws -> CheckMessageResponse {
    return try FfiConverterTypeCheckMessageResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCheckMessageResponse_lower(_ value: CheckMessageResponse) -> RustBuffer {
    return FfiConverterTypeCheckMessageResponse.lower(value)
}


public struct Config {
    public var liquidExplorer: BlockchainExplorer
    public var bitcoinExplorer: BlockchainExplorer
    public var workingDir: String
    public var network: LiquidNetwork
    public var paymentTimeoutSec: UInt64
    public var syncServiceUrl: String?
    public var breezApiKey: String?
    public var zeroConfMaxAmountSat: UInt64?
    public var useDefaultExternalInputParsers: Bool
    public var useMagicRoutingHints: Bool
    public var externalInputParsers: [ExternalInputParser]?
    public var onchainFeeRateLeewaySat: UInt64?
    public var assetMetadata: [AssetMetadata]?
    public var sideswapApiKey: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(liquidExplorer: BlockchainExplorer, bitcoinExplorer: BlockchainExplorer, workingDir: String, network: LiquidNetwork, paymentTimeoutSec: UInt64, syncServiceUrl: String?, breezApiKey: String?, zeroConfMaxAmountSat: UInt64?, useDefaultExternalInputParsers: Bool = true, useMagicRoutingHints: Bool = true, externalInputParsers: [ExternalInputParser]? = nil, onchainFeeRateLeewaySat: UInt64? = nil, assetMetadata: [AssetMetadata]? = nil, sideswapApiKey: String? = nil) {
        self.liquidExplorer = liquidExplorer
        self.bitcoinExplorer = bitcoinExplorer
        self.workingDir = workingDir
        self.network = network
        self.paymentTimeoutSec = paymentTimeoutSec
        self.syncServiceUrl = syncServiceUrl
        self.breezApiKey = breezApiKey
        self.zeroConfMaxAmountSat = zeroConfMaxAmountSat
        self.useDefaultExternalInputParsers = useDefaultExternalInputParsers
        self.useMagicRoutingHints = useMagicRoutingHints
        self.externalInputParsers = externalInputParsers
        self.onchainFeeRateLeewaySat = onchainFeeRateLeewaySat
        self.assetMetadata = assetMetadata
        self.sideswapApiKey = sideswapApiKey
    }
}



extension Config: Equatable, Hashable {
    public static func ==(lhs: Config, rhs: Config) -> Bool {
        if lhs.liquidExplorer != rhs.liquidExplorer {
            return false
        }
        if lhs.bitcoinExplorer != rhs.bitcoinExplorer {
            return false
        }
        if lhs.workingDir != rhs.workingDir {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        if lhs.paymentTimeoutSec != rhs.paymentTimeoutSec {
            return false
        }
        if lhs.syncServiceUrl != rhs.syncServiceUrl {
            return false
        }
        if lhs.breezApiKey != rhs.breezApiKey {
            return false
        }
        if lhs.zeroConfMaxAmountSat != rhs.zeroConfMaxAmountSat {
            return false
        }
        if lhs.useDefaultExternalInputParsers != rhs.useDefaultExternalInputParsers {
            return false
        }
        if lhs.useMagicRoutingHints != rhs.useMagicRoutingHints {
            return false
        }
        if lhs.externalInputParsers != rhs.externalInputParsers {
            return false
        }
        if lhs.onchainFeeRateLeewaySat != rhs.onchainFeeRateLeewaySat {
            return false
        }
        if lhs.assetMetadata != rhs.assetMetadata {
            return false
        }
        if lhs.sideswapApiKey != rhs.sideswapApiKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(liquidExplorer)
        hasher.combine(bitcoinExplorer)
        hasher.combine(workingDir)
        hasher.combine(network)
        hasher.combine(paymentTimeoutSec)
        hasher.combine(syncServiceUrl)
        hasher.combine(breezApiKey)
        hasher.combine(zeroConfMaxAmountSat)
        hasher.combine(useDefaultExternalInputParsers)
        hasher.combine(useMagicRoutingHints)
        hasher.combine(externalInputParsers)
        hasher.combine(onchainFeeRateLeewaySat)
        hasher.combine(assetMetadata)
        hasher.combine(sideswapApiKey)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        return
            try Config(
                liquidExplorer: FfiConverterTypeBlockchainExplorer.read(from: &buf), 
                bitcoinExplorer: FfiConverterTypeBlockchainExplorer.read(from: &buf), 
                workingDir: FfiConverterString.read(from: &buf), 
                network: FfiConverterTypeLiquidNetwork.read(from: &buf), 
                paymentTimeoutSec: FfiConverterUInt64.read(from: &buf), 
                syncServiceUrl: FfiConverterOptionString.read(from: &buf), 
                breezApiKey: FfiConverterOptionString.read(from: &buf), 
                zeroConfMaxAmountSat: FfiConverterOptionUInt64.read(from: &buf), 
                useDefaultExternalInputParsers: FfiConverterBool.read(from: &buf), 
                useMagicRoutingHints: FfiConverterBool.read(from: &buf), 
                externalInputParsers: FfiConverterOptionSequenceTypeExternalInputParser.read(from: &buf), 
                onchainFeeRateLeewaySat: FfiConverterOptionUInt64.read(from: &buf), 
                assetMetadata: FfiConverterOptionSequenceTypeAssetMetadata.read(from: &buf), 
                sideswapApiKey: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        FfiConverterTypeBlockchainExplorer.write(value.liquidExplorer, into: &buf)
        FfiConverterTypeBlockchainExplorer.write(value.bitcoinExplorer, into: &buf)
        FfiConverterString.write(value.workingDir, into: &buf)
        FfiConverterTypeLiquidNetwork.write(value.network, into: &buf)
        FfiConverterUInt64.write(value.paymentTimeoutSec, into: &buf)
        FfiConverterOptionString.write(value.syncServiceUrl, into: &buf)
        FfiConverterOptionString.write(value.breezApiKey, into: &buf)
        FfiConverterOptionUInt64.write(value.zeroConfMaxAmountSat, into: &buf)
        FfiConverterBool.write(value.useDefaultExternalInputParsers, into: &buf)
        FfiConverterBool.write(value.useMagicRoutingHints, into: &buf)
        FfiConverterOptionSequenceTypeExternalInputParser.write(value.externalInputParsers, into: &buf)
        FfiConverterOptionUInt64.write(value.onchainFeeRateLeewaySat, into: &buf)
        FfiConverterOptionSequenceTypeAssetMetadata.write(value.assetMetadata, into: &buf)
        FfiConverterOptionString.write(value.sideswapApiKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lift(_ buf: RustBuffer) throws -> Config {
    return try FfiConverterTypeConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lower(_ value: Config) -> RustBuffer {
    return FfiConverterTypeConfig.lower(value)
}


public struct ConnectRequest {
    public var config: Config
    public var mnemonic: String?
    public var passphrase: String?
    public var seed: [UInt8]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(config: Config, mnemonic: String? = nil, passphrase: String? = nil, seed: [UInt8]? = nil) {
        self.config = config
        self.mnemonic = mnemonic
        self.passphrase = passphrase
        self.seed = seed
    }
}



extension ConnectRequest: Equatable, Hashable {
    public static func ==(lhs: ConnectRequest, rhs: ConnectRequest) -> Bool {
        if lhs.config != rhs.config {
            return false
        }
        if lhs.mnemonic != rhs.mnemonic {
            return false
        }
        if lhs.passphrase != rhs.passphrase {
            return false
        }
        if lhs.seed != rhs.seed {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(config)
        hasher.combine(mnemonic)
        hasher.combine(passphrase)
        hasher.combine(seed)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnectRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectRequest {
        return
            try ConnectRequest(
                config: FfiConverterTypeConfig.read(from: &buf), 
                mnemonic: FfiConverterOptionString.read(from: &buf), 
                passphrase: FfiConverterOptionString.read(from: &buf), 
                seed: FfiConverterOptionSequenceUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: ConnectRequest, into buf: inout [UInt8]) {
        FfiConverterTypeConfig.write(value.config, into: &buf)
        FfiConverterOptionString.write(value.mnemonic, into: &buf)
        FfiConverterOptionString.write(value.passphrase, into: &buf)
        FfiConverterOptionSequenceUInt8.write(value.seed, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectRequest_lift(_ buf: RustBuffer) throws -> ConnectRequest {
    return try FfiConverterTypeConnectRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectRequest_lower(_ value: ConnectRequest) -> RustBuffer {
    return FfiConverterTypeConnectRequest.lower(value)
}


public struct ConnectWithSignerRequest {
    public var config: Config

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(config: Config) {
        self.config = config
    }
}



extension ConnectWithSignerRequest: Equatable, Hashable {
    public static func ==(lhs: ConnectWithSignerRequest, rhs: ConnectWithSignerRequest) -> Bool {
        if lhs.config != rhs.config {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(config)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnectWithSignerRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectWithSignerRequest {
        return
            try ConnectWithSignerRequest(
                config: FfiConverterTypeConfig.read(from: &buf)
        )
    }

    public static func write(_ value: ConnectWithSignerRequest, into buf: inout [UInt8]) {
        FfiConverterTypeConfig.write(value.config, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectWithSignerRequest_lift(_ buf: RustBuffer) throws -> ConnectWithSignerRequest {
    return try FfiConverterTypeConnectWithSignerRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectWithSignerRequest_lower(_ value: ConnectWithSignerRequest) -> RustBuffer {
    return FfiConverterTypeConnectWithSignerRequest.lower(value)
}


public struct CreateBolt12InvoiceRequest {
    public var offer: String
    public var invoiceRequest: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(offer: String, invoiceRequest: String) {
        self.offer = offer
        self.invoiceRequest = invoiceRequest
    }
}



extension CreateBolt12InvoiceRequest: Equatable, Hashable {
    public static func ==(lhs: CreateBolt12InvoiceRequest, rhs: CreateBolt12InvoiceRequest) -> Bool {
        if lhs.offer != rhs.offer {
            return false
        }
        if lhs.invoiceRequest != rhs.invoiceRequest {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(offer)
        hasher.combine(invoiceRequest)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCreateBolt12InvoiceRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CreateBolt12InvoiceRequest {
        return
            try CreateBolt12InvoiceRequest(
                offer: FfiConverterString.read(from: &buf), 
                invoiceRequest: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: CreateBolt12InvoiceRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.offer, into: &buf)
        FfiConverterString.write(value.invoiceRequest, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCreateBolt12InvoiceRequest_lift(_ buf: RustBuffer) throws -> CreateBolt12InvoiceRequest {
    return try FfiConverterTypeCreateBolt12InvoiceRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCreateBolt12InvoiceRequest_lower(_ value: CreateBolt12InvoiceRequest) -> RustBuffer {
    return FfiConverterTypeCreateBolt12InvoiceRequest.lower(value)
}


public struct CreateBolt12InvoiceResponse {
    public var invoice: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(invoice: String) {
        self.invoice = invoice
    }
}



extension CreateBolt12InvoiceResponse: Equatable, Hashable {
    public static func ==(lhs: CreateBolt12InvoiceResponse, rhs: CreateBolt12InvoiceResponse) -> Bool {
        if lhs.invoice != rhs.invoice {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(invoice)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCreateBolt12InvoiceResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CreateBolt12InvoiceResponse {
        return
            try CreateBolt12InvoiceResponse(
                invoice: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: CreateBolt12InvoiceResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.invoice, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCreateBolt12InvoiceResponse_lift(_ buf: RustBuffer) throws -> CreateBolt12InvoiceResponse {
    return try FfiConverterTypeCreateBolt12InvoiceResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCreateBolt12InvoiceResponse_lower(_ value: CreateBolt12InvoiceResponse) -> RustBuffer {
    return FfiConverterTypeCreateBolt12InvoiceResponse.lower(value)
}


public struct CurrencyInfo {
    public var name: String
    public var fractionSize: UInt32
    public var spacing: UInt32?
    public var symbol: Symbol?
    public var uniqSymbol: Symbol?
    public var localizedName: [LocalizedName]
    public var localeOverrides: [LocaleOverrides]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, fractionSize: UInt32, spacing: UInt32?, symbol: Symbol?, uniqSymbol: Symbol?, localizedName: [LocalizedName], localeOverrides: [LocaleOverrides]) {
        self.name = name
        self.fractionSize = fractionSize
        self.spacing = spacing
        self.symbol = symbol
        self.uniqSymbol = uniqSymbol
        self.localizedName = localizedName
        self.localeOverrides = localeOverrides
    }
}



extension CurrencyInfo: Equatable, Hashable {
    public static func ==(lhs: CurrencyInfo, rhs: CurrencyInfo) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.fractionSize != rhs.fractionSize {
            return false
        }
        if lhs.spacing != rhs.spacing {
            return false
        }
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.uniqSymbol != rhs.uniqSymbol {
            return false
        }
        if lhs.localizedName != rhs.localizedName {
            return false
        }
        if lhs.localeOverrides != rhs.localeOverrides {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(fractionSize)
        hasher.combine(spacing)
        hasher.combine(symbol)
        hasher.combine(uniqSymbol)
        hasher.combine(localizedName)
        hasher.combine(localeOverrides)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCurrencyInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CurrencyInfo {
        return
            try CurrencyInfo(
                name: FfiConverterString.read(from: &buf), 
                fractionSize: FfiConverterUInt32.read(from: &buf), 
                spacing: FfiConverterOptionUInt32.read(from: &buf), 
                symbol: FfiConverterOptionTypeSymbol.read(from: &buf), 
                uniqSymbol: FfiConverterOptionTypeSymbol.read(from: &buf), 
                localizedName: FfiConverterSequenceTypeLocalizedName.read(from: &buf), 
                localeOverrides: FfiConverterSequenceTypeLocaleOverrides.read(from: &buf)
        )
    }

    public static func write(_ value: CurrencyInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterUInt32.write(value.fractionSize, into: &buf)
        FfiConverterOptionUInt32.write(value.spacing, into: &buf)
        FfiConverterOptionTypeSymbol.write(value.symbol, into: &buf)
        FfiConverterOptionTypeSymbol.write(value.uniqSymbol, into: &buf)
        FfiConverterSequenceTypeLocalizedName.write(value.localizedName, into: &buf)
        FfiConverterSequenceTypeLocaleOverrides.write(value.localeOverrides, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurrencyInfo_lift(_ buf: RustBuffer) throws -> CurrencyInfo {
    return try FfiConverterTypeCurrencyInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurrencyInfo_lower(_ value: CurrencyInfo) -> RustBuffer {
    return FfiConverterTypeCurrencyInfo.lower(value)
}


public struct ExternalInputParser {
    public var providerId: String
    public var inputRegex: String
    public var parserUrl: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(providerId: String, inputRegex: String, parserUrl: String) {
        self.providerId = providerId
        self.inputRegex = inputRegex
        self.parserUrl = parserUrl
    }
}



extension ExternalInputParser: Equatable, Hashable {
    public static func ==(lhs: ExternalInputParser, rhs: ExternalInputParser) -> Bool {
        if lhs.providerId != rhs.providerId {
            return false
        }
        if lhs.inputRegex != rhs.inputRegex {
            return false
        }
        if lhs.parserUrl != rhs.parserUrl {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(providerId)
        hasher.combine(inputRegex)
        hasher.combine(parserUrl)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeExternalInputParser: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExternalInputParser {
        return
            try ExternalInputParser(
                providerId: FfiConverterString.read(from: &buf), 
                inputRegex: FfiConverterString.read(from: &buf), 
                parserUrl: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ExternalInputParser, into buf: inout [UInt8]) {
        FfiConverterString.write(value.providerId, into: &buf)
        FfiConverterString.write(value.inputRegex, into: &buf)
        FfiConverterString.write(value.parserUrl, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExternalInputParser_lift(_ buf: RustBuffer) throws -> ExternalInputParser {
    return try FfiConverterTypeExternalInputParser.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExternalInputParser_lower(_ value: ExternalInputParser) -> RustBuffer {
    return FfiConverterTypeExternalInputParser.lower(value)
}


public struct FetchPaymentProposedFeesRequest {
    public var swapId: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(swapId: String) {
        self.swapId = swapId
    }
}



extension FetchPaymentProposedFeesRequest: Equatable, Hashable {
    public static func ==(lhs: FetchPaymentProposedFeesRequest, rhs: FetchPaymentProposedFeesRequest) -> Bool {
        if lhs.swapId != rhs.swapId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(swapId)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFetchPaymentProposedFeesRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FetchPaymentProposedFeesRequest {
        return
            try FetchPaymentProposedFeesRequest(
                swapId: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: FetchPaymentProposedFeesRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.swapId, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFetchPaymentProposedFeesRequest_lift(_ buf: RustBuffer) throws -> FetchPaymentProposedFeesRequest {
    return try FfiConverterTypeFetchPaymentProposedFeesRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFetchPaymentProposedFeesRequest_lower(_ value: FetchPaymentProposedFeesRequest) -> RustBuffer {
    return FfiConverterTypeFetchPaymentProposedFeesRequest.lower(value)
}


public struct FetchPaymentProposedFeesResponse {
    public var swapId: String
    public var feesSat: UInt64
    public var payerAmountSat: UInt64
    public var receiverAmountSat: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(swapId: String, feesSat: UInt64, payerAmountSat: UInt64, receiverAmountSat: UInt64) {
        self.swapId = swapId
        self.feesSat = feesSat
        self.payerAmountSat = payerAmountSat
        self.receiverAmountSat = receiverAmountSat
    }
}



extension FetchPaymentProposedFeesResponse: Equatable, Hashable {
    public static func ==(lhs: FetchPaymentProposedFeesResponse, rhs: FetchPaymentProposedFeesResponse) -> Bool {
        if lhs.swapId != rhs.swapId {
            return false
        }
        if lhs.feesSat != rhs.feesSat {
            return false
        }
        if lhs.payerAmountSat != rhs.payerAmountSat {
            return false
        }
        if lhs.receiverAmountSat != rhs.receiverAmountSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(swapId)
        hasher.combine(feesSat)
        hasher.combine(payerAmountSat)
        hasher.combine(receiverAmountSat)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFetchPaymentProposedFeesResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FetchPaymentProposedFeesResponse {
        return
            try FetchPaymentProposedFeesResponse(
                swapId: FfiConverterString.read(from: &buf), 
                feesSat: FfiConverterUInt64.read(from: &buf), 
                payerAmountSat: FfiConverterUInt64.read(from: &buf), 
                receiverAmountSat: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: FetchPaymentProposedFeesResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.swapId, into: &buf)
        FfiConverterUInt64.write(value.feesSat, into: &buf)
        FfiConverterUInt64.write(value.payerAmountSat, into: &buf)
        FfiConverterUInt64.write(value.receiverAmountSat, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFetchPaymentProposedFeesResponse_lift(_ buf: RustBuffer) throws -> FetchPaymentProposedFeesResponse {
    return try FfiConverterTypeFetchPaymentProposedFeesResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFetchPaymentProposedFeesResponse_lower(_ value: FetchPaymentProposedFeesResponse) -> RustBuffer {
    return FfiConverterTypeFetchPaymentProposedFeesResponse.lower(value)
}


public struct FiatCurrency {
    public var id: String
    public var info: CurrencyInfo

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, info: CurrencyInfo) {
        self.id = id
        self.info = info
    }
}



extension FiatCurrency: Equatable, Hashable {
    public static func ==(lhs: FiatCurrency, rhs: FiatCurrency) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.info != rhs.info {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(info)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFiatCurrency: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FiatCurrency {
        return
            try FiatCurrency(
                id: FfiConverterString.read(from: &buf), 
                info: FfiConverterTypeCurrencyInfo.read(from: &buf)
        )
    }

    public static func write(_ value: FiatCurrency, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterTypeCurrencyInfo.write(value.info, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFiatCurrency_lift(_ buf: RustBuffer) throws -> FiatCurrency {
    return try FfiConverterTypeFiatCurrency.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFiatCurrency_lower(_ value: FiatCurrency) -> RustBuffer {
    return FfiConverterTypeFiatCurrency.lower(value)
}


public struct GetInfoResponse {
    public var walletInfo: WalletInfo
    public var blockchainInfo: BlockchainInfo

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(walletInfo: WalletInfo, blockchainInfo: BlockchainInfo) {
        self.walletInfo = walletInfo
        self.blockchainInfo = blockchainInfo
    }
}



extension GetInfoResponse: Equatable, Hashable {
    public static func ==(lhs: GetInfoResponse, rhs: GetInfoResponse) -> Bool {
        if lhs.walletInfo != rhs.walletInfo {
            return false
        }
        if lhs.blockchainInfo != rhs.blockchainInfo {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(walletInfo)
        hasher.combine(blockchainInfo)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGetInfoResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetInfoResponse {
        return
            try GetInfoResponse(
                walletInfo: FfiConverterTypeWalletInfo.read(from: &buf), 
                blockchainInfo: FfiConverterTypeBlockchainInfo.read(from: &buf)
        )
    }

    public static func write(_ value: GetInfoResponse, into buf: inout [UInt8]) {
        FfiConverterTypeWalletInfo.write(value.walletInfo, into: &buf)
        FfiConverterTypeBlockchainInfo.write(value.blockchainInfo, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetInfoResponse_lift(_ buf: RustBuffer) throws -> GetInfoResponse {
    return try FfiConverterTypeGetInfoResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetInfoResponse_lower(_ value: GetInfoResponse) -> RustBuffer {
    return FfiConverterTypeGetInfoResponse.lower(value)
}


/**
 * ///////////////////////////////
 */
public struct LnInvoice {
    public var bolt11: String
    public var network: Network
    public var payeePubkey: String
    public var paymentHash: String
    public var description: String?
    public var descriptionHash: String?
    public var amountMsat: UInt64?
    public var timestamp: UInt64
    public var expiry: UInt64
    public var routingHints: [RouteHint]
    public var paymentSecret: [UInt8]
    public var minFinalCltvExpiryDelta: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(bolt11: String, network: Network, payeePubkey: String, paymentHash: String, description: String?, descriptionHash: String?, amountMsat: UInt64?, timestamp: UInt64, expiry: UInt64, routingHints: [RouteHint], paymentSecret: [UInt8], minFinalCltvExpiryDelta: UInt64) {
        self.bolt11 = bolt11
        self.network = network
        self.payeePubkey = payeePubkey
        self.paymentHash = paymentHash
        self.description = description
        self.descriptionHash = descriptionHash
        self.amountMsat = amountMsat
        self.timestamp = timestamp
        self.expiry = expiry
        self.routingHints = routingHints
        self.paymentSecret = paymentSecret
        self.minFinalCltvExpiryDelta = minFinalCltvExpiryDelta
    }
}



extension LnInvoice: Equatable, Hashable {
    public static func ==(lhs: LnInvoice, rhs: LnInvoice) -> Bool {
        if lhs.bolt11 != rhs.bolt11 {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        if lhs.payeePubkey != rhs.payeePubkey {
            return false
        }
        if lhs.paymentHash != rhs.paymentHash {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        if lhs.descriptionHash != rhs.descriptionHash {
            return false
        }
        if lhs.amountMsat != rhs.amountMsat {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.expiry != rhs.expiry {
            return false
        }
        if lhs.routingHints != rhs.routingHints {
            return false
        }
        if lhs.paymentSecret != rhs.paymentSecret {
            return false
        }
        if lhs.minFinalCltvExpiryDelta != rhs.minFinalCltvExpiryDelta {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bolt11)
        hasher.combine(network)
        hasher.combine(payeePubkey)
        hasher.combine(paymentHash)
        hasher.combine(description)
        hasher.combine(descriptionHash)
        hasher.combine(amountMsat)
        hasher.combine(timestamp)
        hasher.combine(expiry)
        hasher.combine(routingHints)
        hasher.combine(paymentSecret)
        hasher.combine(minFinalCltvExpiryDelta)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLNInvoice: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnInvoice {
        return
            try LnInvoice(
                bolt11: FfiConverterString.read(from: &buf), 
                network: FfiConverterTypeNetwork.read(from: &buf), 
                payeePubkey: FfiConverterString.read(from: &buf), 
                paymentHash: FfiConverterString.read(from: &buf), 
                description: FfiConverterOptionString.read(from: &buf), 
                descriptionHash: FfiConverterOptionString.read(from: &buf), 
                amountMsat: FfiConverterOptionUInt64.read(from: &buf), 
                timestamp: FfiConverterUInt64.read(from: &buf), 
                expiry: FfiConverterUInt64.read(from: &buf), 
                routingHints: FfiConverterSequenceTypeRouteHint.read(from: &buf), 
                paymentSecret: FfiConverterSequenceUInt8.read(from: &buf), 
                minFinalCltvExpiryDelta: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: LnInvoice, into buf: inout [UInt8]) {
        FfiConverterString.write(value.bolt11, into: &buf)
        FfiConverterTypeNetwork.write(value.network, into: &buf)
        FfiConverterString.write(value.payeePubkey, into: &buf)
        FfiConverterString.write(value.paymentHash, into: &buf)
        FfiConverterOptionString.write(value.description, into: &buf)
        FfiConverterOptionString.write(value.descriptionHash, into: &buf)
        FfiConverterOptionUInt64.write(value.amountMsat, into: &buf)
        FfiConverterUInt64.write(value.timestamp, into: &buf)
        FfiConverterUInt64.write(value.expiry, into: &buf)
        FfiConverterSequenceTypeRouteHint.write(value.routingHints, into: &buf)
        FfiConverterSequenceUInt8.write(value.paymentSecret, into: &buf)
        FfiConverterUInt64.write(value.minFinalCltvExpiryDelta, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLNInvoice_lift(_ buf: RustBuffer) throws -> LnInvoice {
    return try FfiConverterTypeLNInvoice.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLNInvoice_lower(_ value: LnInvoice) -> RustBuffer {
    return FfiConverterTypeLNInvoice.lower(value)
}


public struct LnOffer {
    public var offer: String
    public var chains: [String]
    public var paths: [LnOfferBlindedPath]
    public var description: String?
    public var signingPubkey: String?
    public var minAmount: Amount?
    public var absoluteExpiry: UInt64?
    public var issuer: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(offer: String, chains: [String], paths: [LnOfferBlindedPath], description: String?, signingPubkey: String?, minAmount: Amount?, absoluteExpiry: UInt64?, issuer: String?) {
        self.offer = offer
        self.chains = chains
        self.paths = paths
        self.description = description
        self.signingPubkey = signingPubkey
        self.minAmount = minAmount
        self.absoluteExpiry = absoluteExpiry
        self.issuer = issuer
    }
}



extension LnOffer: Equatable, Hashable {
    public static func ==(lhs: LnOffer, rhs: LnOffer) -> Bool {
        if lhs.offer != rhs.offer {
            return false
        }
        if lhs.chains != rhs.chains {
            return false
        }
        if lhs.paths != rhs.paths {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        if lhs.signingPubkey != rhs.signingPubkey {
            return false
        }
        if lhs.minAmount != rhs.minAmount {
            return false
        }
        if lhs.absoluteExpiry != rhs.absoluteExpiry {
            return false
        }
        if lhs.issuer != rhs.issuer {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(offer)
        hasher.combine(chains)
        hasher.combine(paths)
        hasher.combine(description)
        hasher.combine(signingPubkey)
        hasher.combine(minAmount)
        hasher.combine(absoluteExpiry)
        hasher.combine(issuer)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLNOffer: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnOffer {
        return
            try LnOffer(
                offer: FfiConverterString.read(from: &buf), 
                chains: FfiConverterSequenceString.read(from: &buf), 
                paths: FfiConverterSequenceTypeLnOfferBlindedPath.read(from: &buf), 
                description: FfiConverterOptionString.read(from: &buf), 
                signingPubkey: FfiConverterOptionString.read(from: &buf), 
                minAmount: FfiConverterOptionTypeAmount.read(from: &buf), 
                absoluteExpiry: FfiConverterOptionUInt64.read(from: &buf), 
                issuer: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: LnOffer, into buf: inout [UInt8]) {
        FfiConverterString.write(value.offer, into: &buf)
        FfiConverterSequenceString.write(value.chains, into: &buf)
        FfiConverterSequenceTypeLnOfferBlindedPath.write(value.paths, into: &buf)
        FfiConverterOptionString.write(value.description, into: &buf)
        FfiConverterOptionString.write(value.signingPubkey, into: &buf)
        FfiConverterOptionTypeAmount.write(value.minAmount, into: &buf)
        FfiConverterOptionUInt64.write(value.absoluteExpiry, into: &buf)
        FfiConverterOptionString.write(value.issuer, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLNOffer_lift(_ buf: RustBuffer) throws -> LnOffer {
    return try FfiConverterTypeLNOffer.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLNOffer_lower(_ value: LnOffer) -> RustBuffer {
    return FfiConverterTypeLNOffer.lower(value)
}


public struct LightningPaymentLimitsResponse {
    public var send: Limits
    public var receive: Limits

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(send: Limits, receive: Limits) {
        self.send = send
        self.receive = receive
    }
}



extension LightningPaymentLimitsResponse: Equatable, Hashable {
    public static func ==(lhs: LightningPaymentLimitsResponse, rhs: LightningPaymentLimitsResponse) -> Bool {
        if lhs.send != rhs.send {
            return false
        }
        if lhs.receive != rhs.receive {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(send)
        hasher.combine(receive)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLightningPaymentLimitsResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LightningPaymentLimitsResponse {
        return
            try LightningPaymentLimitsResponse(
                send: FfiConverterTypeLimits.read(from: &buf), 
                receive: FfiConverterTypeLimits.read(from: &buf)
        )
    }

    public static func write(_ value: LightningPaymentLimitsResponse, into buf: inout [UInt8]) {
        FfiConverterTypeLimits.write(value.send, into: &buf)
        FfiConverterTypeLimits.write(value.receive, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLightningPaymentLimitsResponse_lift(_ buf: RustBuffer) throws -> LightningPaymentLimitsResponse {
    return try FfiConverterTypeLightningPaymentLimitsResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLightningPaymentLimitsResponse_lower(_ value: LightningPaymentLimitsResponse) -> RustBuffer {
    return FfiConverterTypeLightningPaymentLimitsResponse.lower(value)
}


public struct Limits {
    public var minSat: UInt64
    public var maxSat: UInt64
    public var maxZeroConfSat: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(minSat: UInt64, maxSat: UInt64, maxZeroConfSat: UInt64) {
        self.minSat = minSat
        self.maxSat = maxSat
        self.maxZeroConfSat = maxZeroConfSat
    }
}



extension Limits: Equatable, Hashable {
    public static func ==(lhs: Limits, rhs: Limits) -> Bool {
        if lhs.minSat != rhs.minSat {
            return false
        }
        if lhs.maxSat != rhs.maxSat {
            return false
        }
        if lhs.maxZeroConfSat != rhs.maxZeroConfSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(minSat)
        hasher.combine(maxSat)
        hasher.combine(maxZeroConfSat)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLimits: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Limits {
        return
            try Limits(
                minSat: FfiConverterUInt64.read(from: &buf), 
                maxSat: FfiConverterUInt64.read(from: &buf), 
                maxZeroConfSat: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: Limits, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.minSat, into: &buf)
        FfiConverterUInt64.write(value.maxSat, into: &buf)
        FfiConverterUInt64.write(value.maxZeroConfSat, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLimits_lift(_ buf: RustBuffer) throws -> Limits {
    return try FfiConverterTypeLimits.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLimits_lower(_ value: Limits) -> RustBuffer {
    return FfiConverterTypeLimits.lower(value)
}


public struct LiquidAddressData {
    public var address: String
    public var network: Network
    public var assetId: String?
    public var amount: Double?
    public var amountSat: UInt64?
    public var label: String?
    public var message: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, network: Network, assetId: String?, amount: Double?, amountSat: UInt64?, label: String?, message: String?) {
        self.address = address
        self.network = network
        self.assetId = assetId
        self.amount = amount
        self.amountSat = amountSat
        self.label = label
        self.message = message
    }
}



extension LiquidAddressData: Equatable, Hashable {
    public static func ==(lhs: LiquidAddressData, rhs: LiquidAddressData) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        if lhs.assetId != rhs.assetId {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.amountSat != rhs.amountSat {
            return false
        }
        if lhs.label != rhs.label {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(network)
        hasher.combine(assetId)
        hasher.combine(amount)
        hasher.combine(amountSat)
        hasher.combine(label)
        hasher.combine(message)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLiquidAddressData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiquidAddressData {
        return
            try LiquidAddressData(
                address: FfiConverterString.read(from: &buf), 
                network: FfiConverterTypeNetwork.read(from: &buf), 
                assetId: FfiConverterOptionString.read(from: &buf), 
                amount: FfiConverterOptionDouble.read(from: &buf), 
                amountSat: FfiConverterOptionUInt64.read(from: &buf), 
                label: FfiConverterOptionString.read(from: &buf), 
                message: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: LiquidAddressData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterTypeNetwork.write(value.network, into: &buf)
        FfiConverterOptionString.write(value.assetId, into: &buf)
        FfiConverterOptionDouble.write(value.amount, into: &buf)
        FfiConverterOptionUInt64.write(value.amountSat, into: &buf)
        FfiConverterOptionString.write(value.label, into: &buf)
        FfiConverterOptionString.write(value.message, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLiquidAddressData_lift(_ buf: RustBuffer) throws -> LiquidAddressData {
    return try FfiConverterTypeLiquidAddressData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLiquidAddressData_lower(_ value: LiquidAddressData) -> RustBuffer {
    return FfiConverterTypeLiquidAddressData.lower(value)
}


public struct ListPaymentsRequest {
    public var filters: [PaymentType]?
    public var states: [PaymentState]?
    public var fromTimestamp: Int64?
    public var toTimestamp: Int64?
    public var offset: UInt32?
    public var limit: UInt32?
    public var details: ListPaymentDetails?
    public var sortAscending: Bool?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(filters: [PaymentType]? = nil, states: [PaymentState]? = nil, fromTimestamp: Int64? = nil, toTimestamp: Int64? = nil, offset: UInt32? = nil, limit: UInt32? = nil, details: ListPaymentDetails? = nil, sortAscending: Bool? = nil) {
        self.filters = filters
        self.states = states
        self.fromTimestamp = fromTimestamp
        self.toTimestamp = toTimestamp
        self.offset = offset
        self.limit = limit
        self.details = details
        self.sortAscending = sortAscending
    }
}



extension ListPaymentsRequest: Equatable, Hashable {
    public static func ==(lhs: ListPaymentsRequest, rhs: ListPaymentsRequest) -> Bool {
        if lhs.filters != rhs.filters {
            return false
        }
        if lhs.states != rhs.states {
            return false
        }
        if lhs.fromTimestamp != rhs.fromTimestamp {
            return false
        }
        if lhs.toTimestamp != rhs.toTimestamp {
            return false
        }
        if lhs.offset != rhs.offset {
            return false
        }
        if lhs.limit != rhs.limit {
            return false
        }
        if lhs.details != rhs.details {
            return false
        }
        if lhs.sortAscending != rhs.sortAscending {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(filters)
        hasher.combine(states)
        hasher.combine(fromTimestamp)
        hasher.combine(toTimestamp)
        hasher.combine(offset)
        hasher.combine(limit)
        hasher.combine(details)
        hasher.combine(sortAscending)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeListPaymentsRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ListPaymentsRequest {
        return
            try ListPaymentsRequest(
                filters: FfiConverterOptionSequenceTypePaymentType.read(from: &buf), 
                states: FfiConverterOptionSequenceTypePaymentState.read(from: &buf), 
                fromTimestamp: FfiConverterOptionInt64.read(from: &buf), 
                toTimestamp: FfiConverterOptionInt64.read(from: &buf), 
                offset: FfiConverterOptionUInt32.read(from: &buf), 
                limit: FfiConverterOptionUInt32.read(from: &buf), 
                details: FfiConverterOptionTypeListPaymentDetails.read(from: &buf), 
                sortAscending: FfiConverterOptionBool.read(from: &buf)
        )
    }

    public static func write(_ value: ListPaymentsRequest, into buf: inout [UInt8]) {
        FfiConverterOptionSequenceTypePaymentType.write(value.filters, into: &buf)
        FfiConverterOptionSequenceTypePaymentState.write(value.states, into: &buf)
        FfiConverterOptionInt64.write(value.fromTimestamp, into: &buf)
        FfiConverterOptionInt64.write(value.toTimestamp, into: &buf)
        FfiConverterOptionUInt32.write(value.offset, into: &buf)
        FfiConverterOptionUInt32.write(value.limit, into: &buf)
        FfiConverterOptionTypeListPaymentDetails.write(value.details, into: &buf)
        FfiConverterOptionBool.write(value.sortAscending, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeListPaymentsRequest_lift(_ buf: RustBuffer) throws -> ListPaymentsRequest {
    return try FfiConverterTypeListPaymentsRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeListPaymentsRequest_lower(_ value: ListPaymentsRequest) -> RustBuffer {
    return FfiConverterTypeListPaymentsRequest.lower(value)
}


public struct LnOfferBlindedPath {
    public var blindedHops: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(blindedHops: [String]) {
        self.blindedHops = blindedHops
    }
}



extension LnOfferBlindedPath: Equatable, Hashable {
    public static func ==(lhs: LnOfferBlindedPath, rhs: LnOfferBlindedPath) -> Bool {
        if lhs.blindedHops != rhs.blindedHops {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(blindedHops)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnOfferBlindedPath: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnOfferBlindedPath {
        return
            try LnOfferBlindedPath(
                blindedHops: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: LnOfferBlindedPath, into buf: inout [UInt8]) {
        FfiConverterSequenceString.write(value.blindedHops, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnOfferBlindedPath_lift(_ buf: RustBuffer) throws -> LnOfferBlindedPath {
    return try FfiConverterTypeLnOfferBlindedPath.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnOfferBlindedPath_lower(_ value: LnOfferBlindedPath) -> RustBuffer {
    return FfiConverterTypeLnOfferBlindedPath.lower(value)
}


public struct LnUrlAuthRequestData {
    public var k1: String
    public var domain: String
    public var url: String
    public var action: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(k1: String, domain: String, url: String, action: String? = nil) {
        self.k1 = k1
        self.domain = domain
        self.url = url
        self.action = action
    }
}



extension LnUrlAuthRequestData: Equatable, Hashable {
    public static func ==(lhs: LnUrlAuthRequestData, rhs: LnUrlAuthRequestData) -> Bool {
        if lhs.k1 != rhs.k1 {
            return false
        }
        if lhs.domain != rhs.domain {
            return false
        }
        if lhs.url != rhs.url {
            return false
        }
        if lhs.action != rhs.action {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(k1)
        hasher.combine(domain)
        hasher.combine(url)
        hasher.combine(action)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlAuthRequestData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlAuthRequestData {
        return
            try LnUrlAuthRequestData(
                k1: FfiConverterString.read(from: &buf), 
                domain: FfiConverterString.read(from: &buf), 
                url: FfiConverterString.read(from: &buf), 
                action: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: LnUrlAuthRequestData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.k1, into: &buf)
        FfiConverterString.write(value.domain, into: &buf)
        FfiConverterString.write(value.url, into: &buf)
        FfiConverterOptionString.write(value.action, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlAuthRequestData_lift(_ buf: RustBuffer) throws -> LnUrlAuthRequestData {
    return try FfiConverterTypeLnUrlAuthRequestData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlAuthRequestData_lower(_ value: LnUrlAuthRequestData) -> RustBuffer {
    return FfiConverterTypeLnUrlAuthRequestData.lower(value)
}


public struct LnUrlErrorData {
    public var reason: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(reason: String) {
        self.reason = reason
    }
}



extension LnUrlErrorData: Equatable, Hashable {
    public static func ==(lhs: LnUrlErrorData, rhs: LnUrlErrorData) -> Bool {
        if lhs.reason != rhs.reason {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(reason)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlErrorData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlErrorData {
        return
            try LnUrlErrorData(
                reason: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnUrlErrorData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.reason, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlErrorData_lift(_ buf: RustBuffer) throws -> LnUrlErrorData {
    return try FfiConverterTypeLnUrlErrorData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlErrorData_lower(_ value: LnUrlErrorData) -> RustBuffer {
    return FfiConverterTypeLnUrlErrorData.lower(value)
}


public struct LnUrlInfo {
    public var lnAddress: String?
    public var lnurlPayComment: String?
    public var lnurlPayDomain: String?
    public var lnurlPayMetadata: String?
    public var lnurlPaySuccessAction: SuccessActionProcessed?
    public var lnurlPayUnprocessedSuccessAction: SuccessAction?
    public var lnurlWithdrawEndpoint: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(lnAddress: String?, lnurlPayComment: String?, lnurlPayDomain: String?, lnurlPayMetadata: String?, lnurlPaySuccessAction: SuccessActionProcessed?, lnurlPayUnprocessedSuccessAction: SuccessAction?, lnurlWithdrawEndpoint: String?) {
        self.lnAddress = lnAddress
        self.lnurlPayComment = lnurlPayComment
        self.lnurlPayDomain = lnurlPayDomain
        self.lnurlPayMetadata = lnurlPayMetadata
        self.lnurlPaySuccessAction = lnurlPaySuccessAction
        self.lnurlPayUnprocessedSuccessAction = lnurlPayUnprocessedSuccessAction
        self.lnurlWithdrawEndpoint = lnurlWithdrawEndpoint
    }
}



extension LnUrlInfo: Equatable, Hashable {
    public static func ==(lhs: LnUrlInfo, rhs: LnUrlInfo) -> Bool {
        if lhs.lnAddress != rhs.lnAddress {
            return false
        }
        if lhs.lnurlPayComment != rhs.lnurlPayComment {
            return false
        }
        if lhs.lnurlPayDomain != rhs.lnurlPayDomain {
            return false
        }
        if lhs.lnurlPayMetadata != rhs.lnurlPayMetadata {
            return false
        }
        if lhs.lnurlPaySuccessAction != rhs.lnurlPaySuccessAction {
            return false
        }
        if lhs.lnurlPayUnprocessedSuccessAction != rhs.lnurlPayUnprocessedSuccessAction {
            return false
        }
        if lhs.lnurlWithdrawEndpoint != rhs.lnurlWithdrawEndpoint {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(lnAddress)
        hasher.combine(lnurlPayComment)
        hasher.combine(lnurlPayDomain)
        hasher.combine(lnurlPayMetadata)
        hasher.combine(lnurlPaySuccessAction)
        hasher.combine(lnurlPayUnprocessedSuccessAction)
        hasher.combine(lnurlWithdrawEndpoint)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlInfo {
        return
            try LnUrlInfo(
                lnAddress: FfiConverterOptionString.read(from: &buf), 
                lnurlPayComment: FfiConverterOptionString.read(from: &buf), 
                lnurlPayDomain: FfiConverterOptionString.read(from: &buf), 
                lnurlPayMetadata: FfiConverterOptionString.read(from: &buf), 
                lnurlPaySuccessAction: FfiConverterOptionTypeSuccessActionProcessed.read(from: &buf), 
                lnurlPayUnprocessedSuccessAction: FfiConverterOptionTypeSuccessAction.read(from: &buf), 
                lnurlWithdrawEndpoint: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: LnUrlInfo, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.lnAddress, into: &buf)
        FfiConverterOptionString.write(value.lnurlPayComment, into: &buf)
        FfiConverterOptionString.write(value.lnurlPayDomain, into: &buf)
        FfiConverterOptionString.write(value.lnurlPayMetadata, into: &buf)
        FfiConverterOptionTypeSuccessActionProcessed.write(value.lnurlPaySuccessAction, into: &buf)
        FfiConverterOptionTypeSuccessAction.write(value.lnurlPayUnprocessedSuccessAction, into: &buf)
        FfiConverterOptionString.write(value.lnurlWithdrawEndpoint, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlInfo_lift(_ buf: RustBuffer) throws -> LnUrlInfo {
    return try FfiConverterTypeLnUrlInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlInfo_lower(_ value: LnUrlInfo) -> RustBuffer {
    return FfiConverterTypeLnUrlInfo.lower(value)
}


public struct LnUrlPayErrorData {
    public var paymentHash: String
    public var reason: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(paymentHash: String, reason: String) {
        self.paymentHash = paymentHash
        self.reason = reason
    }
}



extension LnUrlPayErrorData: Equatable, Hashable {
    public static func ==(lhs: LnUrlPayErrorData, rhs: LnUrlPayErrorData) -> Bool {
        if lhs.paymentHash != rhs.paymentHash {
            return false
        }
        if lhs.reason != rhs.reason {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(paymentHash)
        hasher.combine(reason)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlPayErrorData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlPayErrorData {
        return
            try LnUrlPayErrorData(
                paymentHash: FfiConverterString.read(from: &buf), 
                reason: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnUrlPayErrorData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.paymentHash, into: &buf)
        FfiConverterString.write(value.reason, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlPayErrorData_lift(_ buf: RustBuffer) throws -> LnUrlPayErrorData {
    return try FfiConverterTypeLnUrlPayErrorData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlPayErrorData_lower(_ value: LnUrlPayErrorData) -> RustBuffer {
    return FfiConverterTypeLnUrlPayErrorData.lower(value)
}


public struct LnUrlPayRequest {
    public var prepareResponse: PrepareLnUrlPayResponse

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(prepareResponse: PrepareLnUrlPayResponse) {
        self.prepareResponse = prepareResponse
    }
}



extension LnUrlPayRequest: Equatable, Hashable {
    public static func ==(lhs: LnUrlPayRequest, rhs: LnUrlPayRequest) -> Bool {
        if lhs.prepareResponse != rhs.prepareResponse {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(prepareResponse)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlPayRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlPayRequest {
        return
            try LnUrlPayRequest(
                prepareResponse: FfiConverterTypePrepareLnUrlPayResponse.read(from: &buf)
        )
    }

    public static func write(_ value: LnUrlPayRequest, into buf: inout [UInt8]) {
        FfiConverterTypePrepareLnUrlPayResponse.write(value.prepareResponse, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlPayRequest_lift(_ buf: RustBuffer) throws -> LnUrlPayRequest {
    return try FfiConverterTypeLnUrlPayRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlPayRequest_lower(_ value: LnUrlPayRequest) -> RustBuffer {
    return FfiConverterTypeLnUrlPayRequest.lower(value)
}


public struct LnUrlPayRequestData {
    public var callback: String
    public var minSendable: UInt64
    public var maxSendable: UInt64
    public var metadataStr: String
    public var commentAllowed: UInt16
    public var domain: String
    public var allowsNostr: Bool
    public var nostrPubkey: String?
    public var lnAddress: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(callback: String, minSendable: UInt64, maxSendable: UInt64, metadataStr: String, commentAllowed: UInt16, domain: String, allowsNostr: Bool, nostrPubkey: String?, lnAddress: String?) {
        self.callback = callback
        self.minSendable = minSendable
        self.maxSendable = maxSendable
        self.metadataStr = metadataStr
        self.commentAllowed = commentAllowed
        self.domain = domain
        self.allowsNostr = allowsNostr
        self.nostrPubkey = nostrPubkey
        self.lnAddress = lnAddress
    }
}



extension LnUrlPayRequestData: Equatable, Hashable {
    public static func ==(lhs: LnUrlPayRequestData, rhs: LnUrlPayRequestData) -> Bool {
        if lhs.callback != rhs.callback {
            return false
        }
        if lhs.minSendable != rhs.minSendable {
            return false
        }
        if lhs.maxSendable != rhs.maxSendable {
            return false
        }
        if lhs.metadataStr != rhs.metadataStr {
            return false
        }
        if lhs.commentAllowed != rhs.commentAllowed {
            return false
        }
        if lhs.domain != rhs.domain {
            return false
        }
        if lhs.allowsNostr != rhs.allowsNostr {
            return false
        }
        if lhs.nostrPubkey != rhs.nostrPubkey {
            return false
        }
        if lhs.lnAddress != rhs.lnAddress {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(callback)
        hasher.combine(minSendable)
        hasher.combine(maxSendable)
        hasher.combine(metadataStr)
        hasher.combine(commentAllowed)
        hasher.combine(domain)
        hasher.combine(allowsNostr)
        hasher.combine(nostrPubkey)
        hasher.combine(lnAddress)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlPayRequestData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlPayRequestData {
        return
            try LnUrlPayRequestData(
                callback: FfiConverterString.read(from: &buf), 
                minSendable: FfiConverterUInt64.read(from: &buf), 
                maxSendable: FfiConverterUInt64.read(from: &buf), 
                metadataStr: FfiConverterString.read(from: &buf), 
                commentAllowed: FfiConverterUInt16.read(from: &buf), 
                domain: FfiConverterString.read(from: &buf), 
                allowsNostr: FfiConverterBool.read(from: &buf), 
                nostrPubkey: FfiConverterOptionString.read(from: &buf), 
                lnAddress: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: LnUrlPayRequestData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.callback, into: &buf)
        FfiConverterUInt64.write(value.minSendable, into: &buf)
        FfiConverterUInt64.write(value.maxSendable, into: &buf)
        FfiConverterString.write(value.metadataStr, into: &buf)
        FfiConverterUInt16.write(value.commentAllowed, into: &buf)
        FfiConverterString.write(value.domain, into: &buf)
        FfiConverterBool.write(value.allowsNostr, into: &buf)
        FfiConverterOptionString.write(value.nostrPubkey, into: &buf)
        FfiConverterOptionString.write(value.lnAddress, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlPayRequestData_lift(_ buf: RustBuffer) throws -> LnUrlPayRequestData {
    return try FfiConverterTypeLnUrlPayRequestData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlPayRequestData_lower(_ value: LnUrlPayRequestData) -> RustBuffer {
    return FfiConverterTypeLnUrlPayRequestData.lower(value)
}


public struct LnUrlPaySuccessData {
    public var successAction: SuccessActionProcessed?
    public var payment: Payment

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(successAction: SuccessActionProcessed?, payment: Payment) {
        self.successAction = successAction
        self.payment = payment
    }
}



extension LnUrlPaySuccessData: Equatable, Hashable {
    public static func ==(lhs: LnUrlPaySuccessData, rhs: LnUrlPaySuccessData) -> Bool {
        if lhs.successAction != rhs.successAction {
            return false
        }
        if lhs.payment != rhs.payment {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(successAction)
        hasher.combine(payment)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlPaySuccessData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlPaySuccessData {
        return
            try LnUrlPaySuccessData(
                successAction: FfiConverterOptionTypeSuccessActionProcessed.read(from: &buf), 
                payment: FfiConverterTypePayment.read(from: &buf)
        )
    }

    public static func write(_ value: LnUrlPaySuccessData, into buf: inout [UInt8]) {
        FfiConverterOptionTypeSuccessActionProcessed.write(value.successAction, into: &buf)
        FfiConverterTypePayment.write(value.payment, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlPaySuccessData_lift(_ buf: RustBuffer) throws -> LnUrlPaySuccessData {
    return try FfiConverterTypeLnUrlPaySuccessData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlPaySuccessData_lower(_ value: LnUrlPaySuccessData) -> RustBuffer {
    return FfiConverterTypeLnUrlPaySuccessData.lower(value)
}


public struct LnUrlWithdrawRequest {
    public var data: LnUrlWithdrawRequestData
    public var amountMsat: UInt64
    public var description: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(data: LnUrlWithdrawRequestData, amountMsat: UInt64, description: String? = nil) {
        self.data = data
        self.amountMsat = amountMsat
        self.description = description
    }
}



extension LnUrlWithdrawRequest: Equatable, Hashable {
    public static func ==(lhs: LnUrlWithdrawRequest, rhs: LnUrlWithdrawRequest) -> Bool {
        if lhs.data != rhs.data {
            return false
        }
        if lhs.amountMsat != rhs.amountMsat {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(data)
        hasher.combine(amountMsat)
        hasher.combine(description)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlWithdrawRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlWithdrawRequest {
        return
            try LnUrlWithdrawRequest(
                data: FfiConverterTypeLnUrlWithdrawRequestData.read(from: &buf), 
                amountMsat: FfiConverterUInt64.read(from: &buf), 
                description: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: LnUrlWithdrawRequest, into buf: inout [UInt8]) {
        FfiConverterTypeLnUrlWithdrawRequestData.write(value.data, into: &buf)
        FfiConverterUInt64.write(value.amountMsat, into: &buf)
        FfiConverterOptionString.write(value.description, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlWithdrawRequest_lift(_ buf: RustBuffer) throws -> LnUrlWithdrawRequest {
    return try FfiConverterTypeLnUrlWithdrawRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlWithdrawRequest_lower(_ value: LnUrlWithdrawRequest) -> RustBuffer {
    return FfiConverterTypeLnUrlWithdrawRequest.lower(value)
}


public struct LnUrlWithdrawRequestData {
    public var callback: String
    public var k1: String
    public var defaultDescription: String
    public var minWithdrawable: UInt64
    public var maxWithdrawable: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(callback: String, k1: String, defaultDescription: String, minWithdrawable: UInt64, maxWithdrawable: UInt64) {
        self.callback = callback
        self.k1 = k1
        self.defaultDescription = defaultDescription
        self.minWithdrawable = minWithdrawable
        self.maxWithdrawable = maxWithdrawable
    }
}



extension LnUrlWithdrawRequestData: Equatable, Hashable {
    public static func ==(lhs: LnUrlWithdrawRequestData, rhs: LnUrlWithdrawRequestData) -> Bool {
        if lhs.callback != rhs.callback {
            return false
        }
        if lhs.k1 != rhs.k1 {
            return false
        }
        if lhs.defaultDescription != rhs.defaultDescription {
            return false
        }
        if lhs.minWithdrawable != rhs.minWithdrawable {
            return false
        }
        if lhs.maxWithdrawable != rhs.maxWithdrawable {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(callback)
        hasher.combine(k1)
        hasher.combine(defaultDescription)
        hasher.combine(minWithdrawable)
        hasher.combine(maxWithdrawable)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlWithdrawRequestData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlWithdrawRequestData {
        return
            try LnUrlWithdrawRequestData(
                callback: FfiConverterString.read(from: &buf), 
                k1: FfiConverterString.read(from: &buf), 
                defaultDescription: FfiConverterString.read(from: &buf), 
                minWithdrawable: FfiConverterUInt64.read(from: &buf), 
                maxWithdrawable: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: LnUrlWithdrawRequestData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.callback, into: &buf)
        FfiConverterString.write(value.k1, into: &buf)
        FfiConverterString.write(value.defaultDescription, into: &buf)
        FfiConverterUInt64.write(value.minWithdrawable, into: &buf)
        FfiConverterUInt64.write(value.maxWithdrawable, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlWithdrawRequestData_lift(_ buf: RustBuffer) throws -> LnUrlWithdrawRequestData {
    return try FfiConverterTypeLnUrlWithdrawRequestData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlWithdrawRequestData_lower(_ value: LnUrlWithdrawRequestData) -> RustBuffer {
    return FfiConverterTypeLnUrlWithdrawRequestData.lower(value)
}


public struct LnUrlWithdrawSuccessData {
    public var invoice: LnInvoice

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(invoice: LnInvoice) {
        self.invoice = invoice
    }
}



extension LnUrlWithdrawSuccessData: Equatable, Hashable {
    public static func ==(lhs: LnUrlWithdrawSuccessData, rhs: LnUrlWithdrawSuccessData) -> Bool {
        if lhs.invoice != rhs.invoice {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(invoice)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlWithdrawSuccessData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlWithdrawSuccessData {
        return
            try LnUrlWithdrawSuccessData(
                invoice: FfiConverterTypeLNInvoice.read(from: &buf)
        )
    }

    public static func write(_ value: LnUrlWithdrawSuccessData, into buf: inout [UInt8]) {
        FfiConverterTypeLNInvoice.write(value.invoice, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlWithdrawSuccessData_lift(_ buf: RustBuffer) throws -> LnUrlWithdrawSuccessData {
    return try FfiConverterTypeLnUrlWithdrawSuccessData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlWithdrawSuccessData_lower(_ value: LnUrlWithdrawSuccessData) -> RustBuffer {
    return FfiConverterTypeLnUrlWithdrawSuccessData.lower(value)
}


public struct LocaleOverrides {
    public var locale: String
    public var spacing: UInt32?
    public var symbol: Symbol

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(locale: String, spacing: UInt32?, symbol: Symbol) {
        self.locale = locale
        self.spacing = spacing
        self.symbol = symbol
    }
}



extension LocaleOverrides: Equatable, Hashable {
    public static func ==(lhs: LocaleOverrides, rhs: LocaleOverrides) -> Bool {
        if lhs.locale != rhs.locale {
            return false
        }
        if lhs.spacing != rhs.spacing {
            return false
        }
        if lhs.symbol != rhs.symbol {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(locale)
        hasher.combine(spacing)
        hasher.combine(symbol)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLocaleOverrides: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LocaleOverrides {
        return
            try LocaleOverrides(
                locale: FfiConverterString.read(from: &buf), 
                spacing: FfiConverterOptionUInt32.read(from: &buf), 
                symbol: FfiConverterTypeSymbol.read(from: &buf)
        )
    }

    public static func write(_ value: LocaleOverrides, into buf: inout [UInt8]) {
        FfiConverterString.write(value.locale, into: &buf)
        FfiConverterOptionUInt32.write(value.spacing, into: &buf)
        FfiConverterTypeSymbol.write(value.symbol, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLocaleOverrides_lift(_ buf: RustBuffer) throws -> LocaleOverrides {
    return try FfiConverterTypeLocaleOverrides.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLocaleOverrides_lower(_ value: LocaleOverrides) -> RustBuffer {
    return FfiConverterTypeLocaleOverrides.lower(value)
}


public struct LocalizedName {
    public var locale: String
    public var name: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(locale: String, name: String) {
        self.locale = locale
        self.name = name
    }
}



extension LocalizedName: Equatable, Hashable {
    public static func ==(lhs: LocalizedName, rhs: LocalizedName) -> Bool {
        if lhs.locale != rhs.locale {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(locale)
        hasher.combine(name)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLocalizedName: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LocalizedName {
        return
            try LocalizedName(
                locale: FfiConverterString.read(from: &buf), 
                name: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LocalizedName, into buf: inout [UInt8]) {
        FfiConverterString.write(value.locale, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLocalizedName_lift(_ buf: RustBuffer) throws -> LocalizedName {
    return try FfiConverterTypeLocalizedName.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLocalizedName_lower(_ value: LocalizedName) -> RustBuffer {
    return FfiConverterTypeLocalizedName.lower(value)
}


public struct LogEntry {
    public var line: String
    public var level: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(line: String, level: String) {
        self.line = line
        self.level = level
    }
}



extension LogEntry: Equatable, Hashable {
    public static func ==(lhs: LogEntry, rhs: LogEntry) -> Bool {
        if lhs.line != rhs.line {
            return false
        }
        if lhs.level != rhs.level {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(line)
        hasher.combine(level)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLogEntry: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LogEntry {
        return
            try LogEntry(
                line: FfiConverterString.read(from: &buf), 
                level: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LogEntry, into buf: inout [UInt8]) {
        FfiConverterString.write(value.line, into: &buf)
        FfiConverterString.write(value.level, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLogEntry_lift(_ buf: RustBuffer) throws -> LogEntry {
    return try FfiConverterTypeLogEntry.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLogEntry_lower(_ value: LogEntry) -> RustBuffer {
    return FfiConverterTypeLogEntry.lower(value)
}


public struct MessageSuccessActionData {
    public var message: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(message: String) {
        self.message = message
    }
}



extension MessageSuccessActionData: Equatable, Hashable {
    public static func ==(lhs: MessageSuccessActionData, rhs: MessageSuccessActionData) -> Bool {
        if lhs.message != rhs.message {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(message)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMessageSuccessActionData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MessageSuccessActionData {
        return
            try MessageSuccessActionData(
                message: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: MessageSuccessActionData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.message, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMessageSuccessActionData_lift(_ buf: RustBuffer) throws -> MessageSuccessActionData {
    return try FfiConverterTypeMessageSuccessActionData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMessageSuccessActionData_lower(_ value: MessageSuccessActionData) -> RustBuffer {
    return FfiConverterTypeMessageSuccessActionData.lower(value)
}


public struct OnchainPaymentLimitsResponse {
    public var send: Limits
    public var receive: Limits

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(send: Limits, receive: Limits) {
        self.send = send
        self.receive = receive
    }
}



extension OnchainPaymentLimitsResponse: Equatable, Hashable {
    public static func ==(lhs: OnchainPaymentLimitsResponse, rhs: OnchainPaymentLimitsResponse) -> Bool {
        if lhs.send != rhs.send {
            return false
        }
        if lhs.receive != rhs.receive {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(send)
        hasher.combine(receive)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOnchainPaymentLimitsResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OnchainPaymentLimitsResponse {
        return
            try OnchainPaymentLimitsResponse(
                send: FfiConverterTypeLimits.read(from: &buf), 
                receive: FfiConverterTypeLimits.read(from: &buf)
        )
    }

    public static func write(_ value: OnchainPaymentLimitsResponse, into buf: inout [UInt8]) {
        FfiConverterTypeLimits.write(value.send, into: &buf)
        FfiConverterTypeLimits.write(value.receive, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOnchainPaymentLimitsResponse_lift(_ buf: RustBuffer) throws -> OnchainPaymentLimitsResponse {
    return try FfiConverterTypeOnchainPaymentLimitsResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOnchainPaymentLimitsResponse_lower(_ value: OnchainPaymentLimitsResponse) -> RustBuffer {
    return FfiConverterTypeOnchainPaymentLimitsResponse.lower(value)
}


public struct PayOnchainRequest {
    public var address: String
    public var prepareResponse: PreparePayOnchainResponse

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, prepareResponse: PreparePayOnchainResponse) {
        self.address = address
        self.prepareResponse = prepareResponse
    }
}



extension PayOnchainRequest: Equatable, Hashable {
    public static func ==(lhs: PayOnchainRequest, rhs: PayOnchainRequest) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.prepareResponse != rhs.prepareResponse {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(prepareResponse)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePayOnchainRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PayOnchainRequest {
        return
            try PayOnchainRequest(
                address: FfiConverterString.read(from: &buf), 
                prepareResponse: FfiConverterTypePreparePayOnchainResponse.read(from: &buf)
        )
    }

    public static func write(_ value: PayOnchainRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterTypePreparePayOnchainResponse.write(value.prepareResponse, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePayOnchainRequest_lift(_ buf: RustBuffer) throws -> PayOnchainRequest {
    return try FfiConverterTypePayOnchainRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePayOnchainRequest_lower(_ value: PayOnchainRequest) -> RustBuffer {
    return FfiConverterTypePayOnchainRequest.lower(value)
}


public struct Payment {
    public var timestamp: UInt32
    public var amountSat: UInt64
    public var feesSat: UInt64
    public var paymentType: PaymentType
    public var status: PaymentState
    public var details: PaymentDetails
    public var swapperFeesSat: UInt64?
    public var destination: String?
    public var txId: String?
    public var unblindingData: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(timestamp: UInt32, amountSat: UInt64, feesSat: UInt64, paymentType: PaymentType, status: PaymentState, details: PaymentDetails, swapperFeesSat: UInt64? = nil, destination: String? = nil, txId: String? = nil, unblindingData: String? = nil) {
        self.timestamp = timestamp
        self.amountSat = amountSat
        self.feesSat = feesSat
        self.paymentType = paymentType
        self.status = status
        self.details = details
        self.swapperFeesSat = swapperFeesSat
        self.destination = destination
        self.txId = txId
        self.unblindingData = unblindingData
    }
}



extension Payment: Equatable, Hashable {
    public static func ==(lhs: Payment, rhs: Payment) -> Bool {
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.amountSat != rhs.amountSat {
            return false
        }
        if lhs.feesSat != rhs.feesSat {
            return false
        }
        if lhs.paymentType != rhs.paymentType {
            return false
        }
        if lhs.status != rhs.status {
            return false
        }
        if lhs.details != rhs.details {
            return false
        }
        if lhs.swapperFeesSat != rhs.swapperFeesSat {
            return false
        }
        if lhs.destination != rhs.destination {
            return false
        }
        if lhs.txId != rhs.txId {
            return false
        }
        if lhs.unblindingData != rhs.unblindingData {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(timestamp)
        hasher.combine(amountSat)
        hasher.combine(feesSat)
        hasher.combine(paymentType)
        hasher.combine(status)
        hasher.combine(details)
        hasher.combine(swapperFeesSat)
        hasher.combine(destination)
        hasher.combine(txId)
        hasher.combine(unblindingData)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePayment: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Payment {
        return
            try Payment(
                timestamp: FfiConverterUInt32.read(from: &buf), 
                amountSat: FfiConverterUInt64.read(from: &buf), 
                feesSat: FfiConverterUInt64.read(from: &buf), 
                paymentType: FfiConverterTypePaymentType.read(from: &buf), 
                status: FfiConverterTypePaymentState.read(from: &buf), 
                details: FfiConverterTypePaymentDetails.read(from: &buf), 
                swapperFeesSat: FfiConverterOptionUInt64.read(from: &buf), 
                destination: FfiConverterOptionString.read(from: &buf), 
                txId: FfiConverterOptionString.read(from: &buf), 
                unblindingData: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: Payment, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.timestamp, into: &buf)
        FfiConverterUInt64.write(value.amountSat, into: &buf)
        FfiConverterUInt64.write(value.feesSat, into: &buf)
        FfiConverterTypePaymentType.write(value.paymentType, into: &buf)
        FfiConverterTypePaymentState.write(value.status, into: &buf)
        FfiConverterTypePaymentDetails.write(value.details, into: &buf)
        FfiConverterOptionUInt64.write(value.swapperFeesSat, into: &buf)
        FfiConverterOptionString.write(value.destination, into: &buf)
        FfiConverterOptionString.write(value.txId, into: &buf)
        FfiConverterOptionString.write(value.unblindingData, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePayment_lift(_ buf: RustBuffer) throws -> Payment {
    return try FfiConverterTypePayment.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePayment_lower(_ value: Payment) -> RustBuffer {
    return FfiConverterTypePayment.lower(value)
}


public struct PrepareBuyBitcoinRequest {
    public var provider: BuyBitcoinProvider
    public var amountSat: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(provider: BuyBitcoinProvider, amountSat: UInt64) {
        self.provider = provider
        self.amountSat = amountSat
    }
}



extension PrepareBuyBitcoinRequest: Equatable, Hashable {
    public static func ==(lhs: PrepareBuyBitcoinRequest, rhs: PrepareBuyBitcoinRequest) -> Bool {
        if lhs.provider != rhs.provider {
            return false
        }
        if lhs.amountSat != rhs.amountSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(provider)
        hasher.combine(amountSat)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareBuyBitcoinRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareBuyBitcoinRequest {
        return
            try PrepareBuyBitcoinRequest(
                provider: FfiConverterTypeBuyBitcoinProvider.read(from: &buf), 
                amountSat: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareBuyBitcoinRequest, into buf: inout [UInt8]) {
        FfiConverterTypeBuyBitcoinProvider.write(value.provider, into: &buf)
        FfiConverterUInt64.write(value.amountSat, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareBuyBitcoinRequest_lift(_ buf: RustBuffer) throws -> PrepareBuyBitcoinRequest {
    return try FfiConverterTypePrepareBuyBitcoinRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareBuyBitcoinRequest_lower(_ value: PrepareBuyBitcoinRequest) -> RustBuffer {
    return FfiConverterTypePrepareBuyBitcoinRequest.lower(value)
}


public struct PrepareBuyBitcoinResponse {
    public var provider: BuyBitcoinProvider
    public var amountSat: UInt64
    public var feesSat: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(provider: BuyBitcoinProvider, amountSat: UInt64, feesSat: UInt64) {
        self.provider = provider
        self.amountSat = amountSat
        self.feesSat = feesSat
    }
}



extension PrepareBuyBitcoinResponse: Equatable, Hashable {
    public static func ==(lhs: PrepareBuyBitcoinResponse, rhs: PrepareBuyBitcoinResponse) -> Bool {
        if lhs.provider != rhs.provider {
            return false
        }
        if lhs.amountSat != rhs.amountSat {
            return false
        }
        if lhs.feesSat != rhs.feesSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(provider)
        hasher.combine(amountSat)
        hasher.combine(feesSat)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareBuyBitcoinResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareBuyBitcoinResponse {
        return
            try PrepareBuyBitcoinResponse(
                provider: FfiConverterTypeBuyBitcoinProvider.read(from: &buf), 
                amountSat: FfiConverterUInt64.read(from: &buf), 
                feesSat: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareBuyBitcoinResponse, into buf: inout [UInt8]) {
        FfiConverterTypeBuyBitcoinProvider.write(value.provider, into: &buf)
        FfiConverterUInt64.write(value.amountSat, into: &buf)
        FfiConverterUInt64.write(value.feesSat, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareBuyBitcoinResponse_lift(_ buf: RustBuffer) throws -> PrepareBuyBitcoinResponse {
    return try FfiConverterTypePrepareBuyBitcoinResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareBuyBitcoinResponse_lower(_ value: PrepareBuyBitcoinResponse) -> RustBuffer {
    return FfiConverterTypePrepareBuyBitcoinResponse.lower(value)
}


public struct PrepareLnUrlPayRequest {
    public var data: LnUrlPayRequestData
    public var amount: PayAmount
    public var bip353Address: String?
    public var comment: String?
    public var validateSuccessActionUrl: Bool?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(data: LnUrlPayRequestData, amount: PayAmount, bip353Address: String? = nil, comment: String? = nil, validateSuccessActionUrl: Bool? = nil) {
        self.data = data
        self.amount = amount
        self.bip353Address = bip353Address
        self.comment = comment
        self.validateSuccessActionUrl = validateSuccessActionUrl
    }
}



extension PrepareLnUrlPayRequest: Equatable, Hashable {
    public static func ==(lhs: PrepareLnUrlPayRequest, rhs: PrepareLnUrlPayRequest) -> Bool {
        if lhs.data != rhs.data {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.bip353Address != rhs.bip353Address {
            return false
        }
        if lhs.comment != rhs.comment {
            return false
        }
        if lhs.validateSuccessActionUrl != rhs.validateSuccessActionUrl {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(data)
        hasher.combine(amount)
        hasher.combine(bip353Address)
        hasher.combine(comment)
        hasher.combine(validateSuccessActionUrl)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareLnUrlPayRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareLnUrlPayRequest {
        return
            try PrepareLnUrlPayRequest(
                data: FfiConverterTypeLnUrlPayRequestData.read(from: &buf), 
                amount: FfiConverterTypePayAmount.read(from: &buf), 
                bip353Address: FfiConverterOptionString.read(from: &buf), 
                comment: FfiConverterOptionString.read(from: &buf), 
                validateSuccessActionUrl: FfiConverterOptionBool.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareLnUrlPayRequest, into buf: inout [UInt8]) {
        FfiConverterTypeLnUrlPayRequestData.write(value.data, into: &buf)
        FfiConverterTypePayAmount.write(value.amount, into: &buf)
        FfiConverterOptionString.write(value.bip353Address, into: &buf)
        FfiConverterOptionString.write(value.comment, into: &buf)
        FfiConverterOptionBool.write(value.validateSuccessActionUrl, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareLnUrlPayRequest_lift(_ buf: RustBuffer) throws -> PrepareLnUrlPayRequest {
    return try FfiConverterTypePrepareLnUrlPayRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareLnUrlPayRequest_lower(_ value: PrepareLnUrlPayRequest) -> RustBuffer {
    return FfiConverterTypePrepareLnUrlPayRequest.lower(value)
}


public struct PrepareLnUrlPayResponse {
    public var destination: SendDestination
    public var feesSat: UInt64
    public var data: LnUrlPayRequestData
    public var amount: PayAmount
    public var comment: String?
    public var successAction: SuccessAction?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(destination: SendDestination, feesSat: UInt64, data: LnUrlPayRequestData, amount: PayAmount, comment: String? = nil, successAction: SuccessAction? = nil) {
        self.destination = destination
        self.feesSat = feesSat
        self.data = data
        self.amount = amount
        self.comment = comment
        self.successAction = successAction
    }
}



extension PrepareLnUrlPayResponse: Equatable, Hashable {
    public static func ==(lhs: PrepareLnUrlPayResponse, rhs: PrepareLnUrlPayResponse) -> Bool {
        if lhs.destination != rhs.destination {
            return false
        }
        if lhs.feesSat != rhs.feesSat {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.comment != rhs.comment {
            return false
        }
        if lhs.successAction != rhs.successAction {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(destination)
        hasher.combine(feesSat)
        hasher.combine(data)
        hasher.combine(amount)
        hasher.combine(comment)
        hasher.combine(successAction)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareLnUrlPayResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareLnUrlPayResponse {
        return
            try PrepareLnUrlPayResponse(
                destination: FfiConverterTypeSendDestination.read(from: &buf), 
                feesSat: FfiConverterUInt64.read(from: &buf), 
                data: FfiConverterTypeLnUrlPayRequestData.read(from: &buf), 
                amount: FfiConverterTypePayAmount.read(from: &buf), 
                comment: FfiConverterOptionString.read(from: &buf), 
                successAction: FfiConverterOptionTypeSuccessAction.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareLnUrlPayResponse, into buf: inout [UInt8]) {
        FfiConverterTypeSendDestination.write(value.destination, into: &buf)
        FfiConverterUInt64.write(value.feesSat, into: &buf)
        FfiConverterTypeLnUrlPayRequestData.write(value.data, into: &buf)
        FfiConverterTypePayAmount.write(value.amount, into: &buf)
        FfiConverterOptionString.write(value.comment, into: &buf)
        FfiConverterOptionTypeSuccessAction.write(value.successAction, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareLnUrlPayResponse_lift(_ buf: RustBuffer) throws -> PrepareLnUrlPayResponse {
    return try FfiConverterTypePrepareLnUrlPayResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareLnUrlPayResponse_lower(_ value: PrepareLnUrlPayResponse) -> RustBuffer {
    return FfiConverterTypePrepareLnUrlPayResponse.lower(value)
}


public struct PreparePayOnchainRequest {
    public var amount: PayAmount
    public var feeRateSatPerVbyte: UInt32?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(amount: PayAmount, feeRateSatPerVbyte: UInt32? = nil) {
        self.amount = amount
        self.feeRateSatPerVbyte = feeRateSatPerVbyte
    }
}



extension PreparePayOnchainRequest: Equatable, Hashable {
    public static func ==(lhs: PreparePayOnchainRequest, rhs: PreparePayOnchainRequest) -> Bool {
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.feeRateSatPerVbyte != rhs.feeRateSatPerVbyte {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amount)
        hasher.combine(feeRateSatPerVbyte)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePreparePayOnchainRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreparePayOnchainRequest {
        return
            try PreparePayOnchainRequest(
                amount: FfiConverterTypePayAmount.read(from: &buf), 
                feeRateSatPerVbyte: FfiConverterOptionUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: PreparePayOnchainRequest, into buf: inout [UInt8]) {
        FfiConverterTypePayAmount.write(value.amount, into: &buf)
        FfiConverterOptionUInt32.write(value.feeRateSatPerVbyte, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreparePayOnchainRequest_lift(_ buf: RustBuffer) throws -> PreparePayOnchainRequest {
    return try FfiConverterTypePreparePayOnchainRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreparePayOnchainRequest_lower(_ value: PreparePayOnchainRequest) -> RustBuffer {
    return FfiConverterTypePreparePayOnchainRequest.lower(value)
}


public struct PreparePayOnchainResponse {
    public var receiverAmountSat: UInt64
    public var claimFeesSat: UInt64
    public var totalFeesSat: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(receiverAmountSat: UInt64, claimFeesSat: UInt64, totalFeesSat: UInt64) {
        self.receiverAmountSat = receiverAmountSat
        self.claimFeesSat = claimFeesSat
        self.totalFeesSat = totalFeesSat
    }
}



extension PreparePayOnchainResponse: Equatable, Hashable {
    public static func ==(lhs: PreparePayOnchainResponse, rhs: PreparePayOnchainResponse) -> Bool {
        if lhs.receiverAmountSat != rhs.receiverAmountSat {
            return false
        }
        if lhs.claimFeesSat != rhs.claimFeesSat {
            return false
        }
        if lhs.totalFeesSat != rhs.totalFeesSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(receiverAmountSat)
        hasher.combine(claimFeesSat)
        hasher.combine(totalFeesSat)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePreparePayOnchainResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreparePayOnchainResponse {
        return
            try PreparePayOnchainResponse(
                receiverAmountSat: FfiConverterUInt64.read(from: &buf), 
                claimFeesSat: FfiConverterUInt64.read(from: &buf), 
                totalFeesSat: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PreparePayOnchainResponse, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.receiverAmountSat, into: &buf)
        FfiConverterUInt64.write(value.claimFeesSat, into: &buf)
        FfiConverterUInt64.write(value.totalFeesSat, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreparePayOnchainResponse_lift(_ buf: RustBuffer) throws -> PreparePayOnchainResponse {
    return try FfiConverterTypePreparePayOnchainResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreparePayOnchainResponse_lower(_ value: PreparePayOnchainResponse) -> RustBuffer {
    return FfiConverterTypePreparePayOnchainResponse.lower(value)
}


public struct PrepareReceiveRequest {
    public var paymentMethod: PaymentMethod
    public var amount: ReceiveAmount?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(paymentMethod: PaymentMethod, amount: ReceiveAmount? = nil) {
        self.paymentMethod = paymentMethod
        self.amount = amount
    }
}



extension PrepareReceiveRequest: Equatable, Hashable {
    public static func ==(lhs: PrepareReceiveRequest, rhs: PrepareReceiveRequest) -> Bool {
        if lhs.paymentMethod != rhs.paymentMethod {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(paymentMethod)
        hasher.combine(amount)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareReceiveRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareReceiveRequest {
        return
            try PrepareReceiveRequest(
                paymentMethod: FfiConverterTypePaymentMethod.read(from: &buf), 
                amount: FfiConverterOptionTypeReceiveAmount.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareReceiveRequest, into buf: inout [UInt8]) {
        FfiConverterTypePaymentMethod.write(value.paymentMethod, into: &buf)
        FfiConverterOptionTypeReceiveAmount.write(value.amount, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareReceiveRequest_lift(_ buf: RustBuffer) throws -> PrepareReceiveRequest {
    return try FfiConverterTypePrepareReceiveRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareReceiveRequest_lower(_ value: PrepareReceiveRequest) -> RustBuffer {
    return FfiConverterTypePrepareReceiveRequest.lower(value)
}


public struct PrepareReceiveResponse {
    public var paymentMethod: PaymentMethod
    public var feesSat: UInt64
    public var amount: ReceiveAmount?
    public var minPayerAmountSat: UInt64?
    public var maxPayerAmountSat: UInt64?
    public var swapperFeerate: Double?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(paymentMethod: PaymentMethod, feesSat: UInt64, amount: ReceiveAmount?, minPayerAmountSat: UInt64?, maxPayerAmountSat: UInt64?, swapperFeerate: Double?) {
        self.paymentMethod = paymentMethod
        self.feesSat = feesSat
        self.amount = amount
        self.minPayerAmountSat = minPayerAmountSat
        self.maxPayerAmountSat = maxPayerAmountSat
        self.swapperFeerate = swapperFeerate
    }
}



extension PrepareReceiveResponse: Equatable, Hashable {
    public static func ==(lhs: PrepareReceiveResponse, rhs: PrepareReceiveResponse) -> Bool {
        if lhs.paymentMethod != rhs.paymentMethod {
            return false
        }
        if lhs.feesSat != rhs.feesSat {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.minPayerAmountSat != rhs.minPayerAmountSat {
            return false
        }
        if lhs.maxPayerAmountSat != rhs.maxPayerAmountSat {
            return false
        }
        if lhs.swapperFeerate != rhs.swapperFeerate {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(paymentMethod)
        hasher.combine(feesSat)
        hasher.combine(amount)
        hasher.combine(minPayerAmountSat)
        hasher.combine(maxPayerAmountSat)
        hasher.combine(swapperFeerate)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareReceiveResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareReceiveResponse {
        return
            try PrepareReceiveResponse(
                paymentMethod: FfiConverterTypePaymentMethod.read(from: &buf), 
                feesSat: FfiConverterUInt64.read(from: &buf), 
                amount: FfiConverterOptionTypeReceiveAmount.read(from: &buf), 
                minPayerAmountSat: FfiConverterOptionUInt64.read(from: &buf), 
                maxPayerAmountSat: FfiConverterOptionUInt64.read(from: &buf), 
                swapperFeerate: FfiConverterOptionDouble.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareReceiveResponse, into buf: inout [UInt8]) {
        FfiConverterTypePaymentMethod.write(value.paymentMethod, into: &buf)
        FfiConverterUInt64.write(value.feesSat, into: &buf)
        FfiConverterOptionTypeReceiveAmount.write(value.amount, into: &buf)
        FfiConverterOptionUInt64.write(value.minPayerAmountSat, into: &buf)
        FfiConverterOptionUInt64.write(value.maxPayerAmountSat, into: &buf)
        FfiConverterOptionDouble.write(value.swapperFeerate, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareReceiveResponse_lift(_ buf: RustBuffer) throws -> PrepareReceiveResponse {
    return try FfiConverterTypePrepareReceiveResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareReceiveResponse_lower(_ value: PrepareReceiveResponse) -> RustBuffer {
    return FfiConverterTypePrepareReceiveResponse.lower(value)
}


public struct PrepareRefundRequest {
    public var swapAddress: String
    public var refundAddress: String
    public var feeRateSatPerVbyte: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(swapAddress: String, refundAddress: String, feeRateSatPerVbyte: UInt32) {
        self.swapAddress = swapAddress
        self.refundAddress = refundAddress
        self.feeRateSatPerVbyte = feeRateSatPerVbyte
    }
}



extension PrepareRefundRequest: Equatable, Hashable {
    public static func ==(lhs: PrepareRefundRequest, rhs: PrepareRefundRequest) -> Bool {
        if lhs.swapAddress != rhs.swapAddress {
            return false
        }
        if lhs.refundAddress != rhs.refundAddress {
            return false
        }
        if lhs.feeRateSatPerVbyte != rhs.feeRateSatPerVbyte {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(swapAddress)
        hasher.combine(refundAddress)
        hasher.combine(feeRateSatPerVbyte)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareRefundRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareRefundRequest {
        return
            try PrepareRefundRequest(
                swapAddress: FfiConverterString.read(from: &buf), 
                refundAddress: FfiConverterString.read(from: &buf), 
                feeRateSatPerVbyte: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareRefundRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.swapAddress, into: &buf)
        FfiConverterString.write(value.refundAddress, into: &buf)
        FfiConverterUInt32.write(value.feeRateSatPerVbyte, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareRefundRequest_lift(_ buf: RustBuffer) throws -> PrepareRefundRequest {
    return try FfiConverterTypePrepareRefundRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareRefundRequest_lower(_ value: PrepareRefundRequest) -> RustBuffer {
    return FfiConverterTypePrepareRefundRequest.lower(value)
}


public struct PrepareRefundResponse {
    public var txVsize: UInt32
    public var txFeeSat: UInt64
    public var lastRefundTxId: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(txVsize: UInt32, txFeeSat: UInt64, lastRefundTxId: String? = nil) {
        self.txVsize = txVsize
        self.txFeeSat = txFeeSat
        self.lastRefundTxId = lastRefundTxId
    }
}



extension PrepareRefundResponse: Equatable, Hashable {
    public static func ==(lhs: PrepareRefundResponse, rhs: PrepareRefundResponse) -> Bool {
        if lhs.txVsize != rhs.txVsize {
            return false
        }
        if lhs.txFeeSat != rhs.txFeeSat {
            return false
        }
        if lhs.lastRefundTxId != rhs.lastRefundTxId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(txVsize)
        hasher.combine(txFeeSat)
        hasher.combine(lastRefundTxId)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareRefundResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareRefundResponse {
        return
            try PrepareRefundResponse(
                txVsize: FfiConverterUInt32.read(from: &buf), 
                txFeeSat: FfiConverterUInt64.read(from: &buf), 
                lastRefundTxId: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareRefundResponse, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.txVsize, into: &buf)
        FfiConverterUInt64.write(value.txFeeSat, into: &buf)
        FfiConverterOptionString.write(value.lastRefundTxId, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareRefundResponse_lift(_ buf: RustBuffer) throws -> PrepareRefundResponse {
    return try FfiConverterTypePrepareRefundResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareRefundResponse_lower(_ value: PrepareRefundResponse) -> RustBuffer {
    return FfiConverterTypePrepareRefundResponse.lower(value)
}


public struct PrepareSendRequest {
    public var destination: String
    public var amount: PayAmount?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(destination: String, amount: PayAmount? = nil) {
        self.destination = destination
        self.amount = amount
    }
}



extension PrepareSendRequest: Equatable, Hashable {
    public static func ==(lhs: PrepareSendRequest, rhs: PrepareSendRequest) -> Bool {
        if lhs.destination != rhs.destination {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(destination)
        hasher.combine(amount)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareSendRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareSendRequest {
        return
            try PrepareSendRequest(
                destination: FfiConverterString.read(from: &buf), 
                amount: FfiConverterOptionTypePayAmount.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareSendRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.destination, into: &buf)
        FfiConverterOptionTypePayAmount.write(value.amount, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareSendRequest_lift(_ buf: RustBuffer) throws -> PrepareSendRequest {
    return try FfiConverterTypePrepareSendRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareSendRequest_lower(_ value: PrepareSendRequest) -> RustBuffer {
    return FfiConverterTypePrepareSendRequest.lower(value)
}


public struct PrepareSendResponse {
    public var destination: SendDestination
    public var amount: PayAmount?
    public var feesSat: UInt64?
    public var estimatedAssetFees: Double?
    public var exchangeAmountSat: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(destination: SendDestination, amount: PayAmount?, feesSat: UInt64?, estimatedAssetFees: Double?, exchangeAmountSat: UInt64?) {
        self.destination = destination
        self.amount = amount
        self.feesSat = feesSat
        self.estimatedAssetFees = estimatedAssetFees
        self.exchangeAmountSat = exchangeAmountSat
    }
}



extension PrepareSendResponse: Equatable, Hashable {
    public static func ==(lhs: PrepareSendResponse, rhs: PrepareSendResponse) -> Bool {
        if lhs.destination != rhs.destination {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.feesSat != rhs.feesSat {
            return false
        }
        if lhs.estimatedAssetFees != rhs.estimatedAssetFees {
            return false
        }
        if lhs.exchangeAmountSat != rhs.exchangeAmountSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(destination)
        hasher.combine(amount)
        hasher.combine(feesSat)
        hasher.combine(estimatedAssetFees)
        hasher.combine(exchangeAmountSat)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareSendResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareSendResponse {
        return
            try PrepareSendResponse(
                destination: FfiConverterTypeSendDestination.read(from: &buf), 
                amount: FfiConverterOptionTypePayAmount.read(from: &buf), 
                feesSat: FfiConverterOptionUInt64.read(from: &buf), 
                estimatedAssetFees: FfiConverterOptionDouble.read(from: &buf), 
                exchangeAmountSat: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareSendResponse, into buf: inout [UInt8]) {
        FfiConverterTypeSendDestination.write(value.destination, into: &buf)
        FfiConverterOptionTypePayAmount.write(value.amount, into: &buf)
        FfiConverterOptionUInt64.write(value.feesSat, into: &buf)
        FfiConverterOptionDouble.write(value.estimatedAssetFees, into: &buf)
        FfiConverterOptionUInt64.write(value.exchangeAmountSat, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareSendResponse_lift(_ buf: RustBuffer) throws -> PrepareSendResponse {
    return try FfiConverterTypePrepareSendResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePrepareSendResponse_lower(_ value: PrepareSendResponse) -> RustBuffer {
    return FfiConverterTypePrepareSendResponse.lower(value)
}


public struct Rate {
    public var coin: String
    public var value: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(coin: String, value: Double) {
        self.coin = coin
        self.value = value
    }
}



extension Rate: Equatable, Hashable {
    public static func ==(lhs: Rate, rhs: Rate) -> Bool {
        if lhs.coin != rhs.coin {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(coin)
        hasher.combine(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRate: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Rate {
        return
            try Rate(
                coin: FfiConverterString.read(from: &buf), 
                value: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: Rate, into buf: inout [UInt8]) {
        FfiConverterString.write(value.coin, into: &buf)
        FfiConverterDouble.write(value.value, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRate_lift(_ buf: RustBuffer) throws -> Rate {
    return try FfiConverterTypeRate.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRate_lower(_ value: Rate) -> RustBuffer {
    return FfiConverterTypeRate.lower(value)
}


public struct ReceivePaymentRequest {
    public var prepareResponse: PrepareReceiveResponse
    public var description: String?
    public var useDescriptionHash: Bool?
    public var payerNote: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(prepareResponse: PrepareReceiveResponse, description: String? = nil, useDescriptionHash: Bool? = nil, payerNote: String? = nil) {
        self.prepareResponse = prepareResponse
        self.description = description
        self.useDescriptionHash = useDescriptionHash
        self.payerNote = payerNote
    }
}



extension ReceivePaymentRequest: Equatable, Hashable {
    public static func ==(lhs: ReceivePaymentRequest, rhs: ReceivePaymentRequest) -> Bool {
        if lhs.prepareResponse != rhs.prepareResponse {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        if lhs.useDescriptionHash != rhs.useDescriptionHash {
            return false
        }
        if lhs.payerNote != rhs.payerNote {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(prepareResponse)
        hasher.combine(description)
        hasher.combine(useDescriptionHash)
        hasher.combine(payerNote)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeReceivePaymentRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ReceivePaymentRequest {
        return
            try ReceivePaymentRequest(
                prepareResponse: FfiConverterTypePrepareReceiveResponse.read(from: &buf), 
                description: FfiConverterOptionString.read(from: &buf), 
                useDescriptionHash: FfiConverterOptionBool.read(from: &buf), 
                payerNote: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: ReceivePaymentRequest, into buf: inout [UInt8]) {
        FfiConverterTypePrepareReceiveResponse.write(value.prepareResponse, into: &buf)
        FfiConverterOptionString.write(value.description, into: &buf)
        FfiConverterOptionBool.write(value.useDescriptionHash, into: &buf)
        FfiConverterOptionString.write(value.payerNote, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeReceivePaymentRequest_lift(_ buf: RustBuffer) throws -> ReceivePaymentRequest {
    return try FfiConverterTypeReceivePaymentRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeReceivePaymentRequest_lower(_ value: ReceivePaymentRequest) -> RustBuffer {
    return FfiConverterTypeReceivePaymentRequest.lower(value)
}


public struct ReceivePaymentResponse {
    public var destination: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(destination: String) {
        self.destination = destination
    }
}



extension ReceivePaymentResponse: Equatable, Hashable {
    public static func ==(lhs: ReceivePaymentResponse, rhs: ReceivePaymentResponse) -> Bool {
        if lhs.destination != rhs.destination {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(destination)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeReceivePaymentResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ReceivePaymentResponse {
        return
            try ReceivePaymentResponse(
                destination: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ReceivePaymentResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.destination, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeReceivePaymentResponse_lift(_ buf: RustBuffer) throws -> ReceivePaymentResponse {
    return try FfiConverterTypeReceivePaymentResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeReceivePaymentResponse_lower(_ value: ReceivePaymentResponse) -> RustBuffer {
    return FfiConverterTypeReceivePaymentResponse.lower(value)
}


public struct RecommendedFees {
    public var fastestFee: UInt64
    public var halfHourFee: UInt64
    public var hourFee: UInt64
    public var economyFee: UInt64
    public var minimumFee: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(fastestFee: UInt64, halfHourFee: UInt64, hourFee: UInt64, economyFee: UInt64, minimumFee: UInt64) {
        self.fastestFee = fastestFee
        self.halfHourFee = halfHourFee
        self.hourFee = hourFee
        self.economyFee = economyFee
        self.minimumFee = minimumFee
    }
}



extension RecommendedFees: Equatable, Hashable {
    public static func ==(lhs: RecommendedFees, rhs: RecommendedFees) -> Bool {
        if lhs.fastestFee != rhs.fastestFee {
            return false
        }
        if lhs.halfHourFee != rhs.halfHourFee {
            return false
        }
        if lhs.hourFee != rhs.hourFee {
            return false
        }
        if lhs.economyFee != rhs.economyFee {
            return false
        }
        if lhs.minimumFee != rhs.minimumFee {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fastestFee)
        hasher.combine(halfHourFee)
        hasher.combine(hourFee)
        hasher.combine(economyFee)
        hasher.combine(minimumFee)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRecommendedFees: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RecommendedFees {
        return
            try RecommendedFees(
                fastestFee: FfiConverterUInt64.read(from: &buf), 
                halfHourFee: FfiConverterUInt64.read(from: &buf), 
                hourFee: FfiConverterUInt64.read(from: &buf), 
                economyFee: FfiConverterUInt64.read(from: &buf), 
                minimumFee: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: RecommendedFees, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.fastestFee, into: &buf)
        FfiConverterUInt64.write(value.halfHourFee, into: &buf)
        FfiConverterUInt64.write(value.hourFee, into: &buf)
        FfiConverterUInt64.write(value.economyFee, into: &buf)
        FfiConverterUInt64.write(value.minimumFee, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRecommendedFees_lift(_ buf: RustBuffer) throws -> RecommendedFees {
    return try FfiConverterTypeRecommendedFees.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRecommendedFees_lower(_ value: RecommendedFees) -> RustBuffer {
    return FfiConverterTypeRecommendedFees.lower(value)
}


public struct RefundRequest {
    public var swapAddress: String
    public var refundAddress: String
    public var feeRateSatPerVbyte: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(swapAddress: String, refundAddress: String, feeRateSatPerVbyte: UInt32) {
        self.swapAddress = swapAddress
        self.refundAddress = refundAddress
        self.feeRateSatPerVbyte = feeRateSatPerVbyte
    }
}



extension RefundRequest: Equatable, Hashable {
    public static func ==(lhs: RefundRequest, rhs: RefundRequest) -> Bool {
        if lhs.swapAddress != rhs.swapAddress {
            return false
        }
        if lhs.refundAddress != rhs.refundAddress {
            return false
        }
        if lhs.feeRateSatPerVbyte != rhs.feeRateSatPerVbyte {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(swapAddress)
        hasher.combine(refundAddress)
        hasher.combine(feeRateSatPerVbyte)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRefundRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RefundRequest {
        return
            try RefundRequest(
                swapAddress: FfiConverterString.read(from: &buf), 
                refundAddress: FfiConverterString.read(from: &buf), 
                feeRateSatPerVbyte: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: RefundRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.swapAddress, into: &buf)
        FfiConverterString.write(value.refundAddress, into: &buf)
        FfiConverterUInt32.write(value.feeRateSatPerVbyte, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRefundRequest_lift(_ buf: RustBuffer) throws -> RefundRequest {
    return try FfiConverterTypeRefundRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRefundRequest_lower(_ value: RefundRequest) -> RustBuffer {
    return FfiConverterTypeRefundRequest.lower(value)
}


public struct RefundResponse {
    public var refundTxId: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(refundTxId: String) {
        self.refundTxId = refundTxId
    }
}



extension RefundResponse: Equatable, Hashable {
    public static func ==(lhs: RefundResponse, rhs: RefundResponse) -> Bool {
        if lhs.refundTxId != rhs.refundTxId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(refundTxId)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRefundResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RefundResponse {
        return
            try RefundResponse(
                refundTxId: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: RefundResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.refundTxId, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRefundResponse_lift(_ buf: RustBuffer) throws -> RefundResponse {
    return try FfiConverterTypeRefundResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRefundResponse_lower(_ value: RefundResponse) -> RustBuffer {
    return FfiConverterTypeRefundResponse.lower(value)
}


public struct RefundableSwap {
    public var swapAddress: String
    public var timestamp: UInt32
    public var amountSat: UInt64
    public var lastRefundTxId: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(swapAddress: String, timestamp: UInt32, amountSat: UInt64, lastRefundTxId: String?) {
        self.swapAddress = swapAddress
        self.timestamp = timestamp
        self.amountSat = amountSat
        self.lastRefundTxId = lastRefundTxId
    }
}



extension RefundableSwap: Equatable, Hashable {
    public static func ==(lhs: RefundableSwap, rhs: RefundableSwap) -> Bool {
        if lhs.swapAddress != rhs.swapAddress {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.amountSat != rhs.amountSat {
            return false
        }
        if lhs.lastRefundTxId != rhs.lastRefundTxId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(swapAddress)
        hasher.combine(timestamp)
        hasher.combine(amountSat)
        hasher.combine(lastRefundTxId)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRefundableSwap: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RefundableSwap {
        return
            try RefundableSwap(
                swapAddress: FfiConverterString.read(from: &buf), 
                timestamp: FfiConverterUInt32.read(from: &buf), 
                amountSat: FfiConverterUInt64.read(from: &buf), 
                lastRefundTxId: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: RefundableSwap, into buf: inout [UInt8]) {
        FfiConverterString.write(value.swapAddress, into: &buf)
        FfiConverterUInt32.write(value.timestamp, into: &buf)
        FfiConverterUInt64.write(value.amountSat, into: &buf)
        FfiConverterOptionString.write(value.lastRefundTxId, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRefundableSwap_lift(_ buf: RustBuffer) throws -> RefundableSwap {
    return try FfiConverterTypeRefundableSwap.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRefundableSwap_lower(_ value: RefundableSwap) -> RustBuffer {
    return FfiConverterTypeRefundableSwap.lower(value)
}


public struct RestoreRequest {
    public var backupPath: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(backupPath: String? = nil) {
        self.backupPath = backupPath
    }
}



extension RestoreRequest: Equatable, Hashable {
    public static func ==(lhs: RestoreRequest, rhs: RestoreRequest) -> Bool {
        if lhs.backupPath != rhs.backupPath {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(backupPath)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRestoreRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RestoreRequest {
        return
            try RestoreRequest(
                backupPath: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: RestoreRequest, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.backupPath, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRestoreRequest_lift(_ buf: RustBuffer) throws -> RestoreRequest {
    return try FfiConverterTypeRestoreRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRestoreRequest_lower(_ value: RestoreRequest) -> RustBuffer {
    return FfiConverterTypeRestoreRequest.lower(value)
}


public struct RouteHint {
    public var hops: [RouteHintHop]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hops: [RouteHintHop]) {
        self.hops = hops
    }
}



extension RouteHint: Equatable, Hashable {
    public static func ==(lhs: RouteHint, rhs: RouteHint) -> Bool {
        if lhs.hops != rhs.hops {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hops)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteHint: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteHint {
        return
            try RouteHint(
                hops: FfiConverterSequenceTypeRouteHintHop.read(from: &buf)
        )
    }

    public static func write(_ value: RouteHint, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeRouteHintHop.write(value.hops, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteHint_lift(_ buf: RustBuffer) throws -> RouteHint {
    return try FfiConverterTypeRouteHint.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteHint_lower(_ value: RouteHint) -> RustBuffer {
    return FfiConverterTypeRouteHint.lower(value)
}


public struct RouteHintHop {
    public var srcNodeId: String
    public var shortChannelId: String
    public var feesBaseMsat: UInt32
    public var feesProportionalMillionths: UInt32
    public var cltvExpiryDelta: UInt64
    public var htlcMinimumMsat: UInt64?
    public var htlcMaximumMsat: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(srcNodeId: String, shortChannelId: String, feesBaseMsat: UInt32, feesProportionalMillionths: UInt32, cltvExpiryDelta: UInt64, htlcMinimumMsat: UInt64?, htlcMaximumMsat: UInt64?) {
        self.srcNodeId = srcNodeId
        self.shortChannelId = shortChannelId
        self.feesBaseMsat = feesBaseMsat
        self.feesProportionalMillionths = feesProportionalMillionths
        self.cltvExpiryDelta = cltvExpiryDelta
        self.htlcMinimumMsat = htlcMinimumMsat
        self.htlcMaximumMsat = htlcMaximumMsat
    }
}



extension RouteHintHop: Equatable, Hashable {
    public static func ==(lhs: RouteHintHop, rhs: RouteHintHop) -> Bool {
        if lhs.srcNodeId != rhs.srcNodeId {
            return false
        }
        if lhs.shortChannelId != rhs.shortChannelId {
            return false
        }
        if lhs.feesBaseMsat != rhs.feesBaseMsat {
            return false
        }
        if lhs.feesProportionalMillionths != rhs.feesProportionalMillionths {
            return false
        }
        if lhs.cltvExpiryDelta != rhs.cltvExpiryDelta {
            return false
        }
        if lhs.htlcMinimumMsat != rhs.htlcMinimumMsat {
            return false
        }
        if lhs.htlcMaximumMsat != rhs.htlcMaximumMsat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(srcNodeId)
        hasher.combine(shortChannelId)
        hasher.combine(feesBaseMsat)
        hasher.combine(feesProportionalMillionths)
        hasher.combine(cltvExpiryDelta)
        hasher.combine(htlcMinimumMsat)
        hasher.combine(htlcMaximumMsat)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteHintHop: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteHintHop {
        return
            try RouteHintHop(
                srcNodeId: FfiConverterString.read(from: &buf), 
                shortChannelId: FfiConverterString.read(from: &buf), 
                feesBaseMsat: FfiConverterUInt32.read(from: &buf), 
                feesProportionalMillionths: FfiConverterUInt32.read(from: &buf), 
                cltvExpiryDelta: FfiConverterUInt64.read(from: &buf), 
                htlcMinimumMsat: FfiConverterOptionUInt64.read(from: &buf), 
                htlcMaximumMsat: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: RouteHintHop, into buf: inout [UInt8]) {
        FfiConverterString.write(value.srcNodeId, into: &buf)
        FfiConverterString.write(value.shortChannelId, into: &buf)
        FfiConverterUInt32.write(value.feesBaseMsat, into: &buf)
        FfiConverterUInt32.write(value.feesProportionalMillionths, into: &buf)
        FfiConverterUInt64.write(value.cltvExpiryDelta, into: &buf)
        FfiConverterOptionUInt64.write(value.htlcMinimumMsat, into: &buf)
        FfiConverterOptionUInt64.write(value.htlcMaximumMsat, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteHintHop_lift(_ buf: RustBuffer) throws -> RouteHintHop {
    return try FfiConverterTypeRouteHintHop.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteHintHop_lower(_ value: RouteHintHop) -> RustBuffer {
    return FfiConverterTypeRouteHintHop.lower(value)
}


public struct SendPaymentRequest {
    public var prepareResponse: PrepareSendResponse
    public var useAssetFees: Bool?
    public var payerNote: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(prepareResponse: PrepareSendResponse, useAssetFees: Bool? = nil, payerNote: String? = nil) {
        self.prepareResponse = prepareResponse
        self.useAssetFees = useAssetFees
        self.payerNote = payerNote
    }
}



extension SendPaymentRequest: Equatable, Hashable {
    public static func ==(lhs: SendPaymentRequest, rhs: SendPaymentRequest) -> Bool {
        if lhs.prepareResponse != rhs.prepareResponse {
            return false
        }
        if lhs.useAssetFees != rhs.useAssetFees {
            return false
        }
        if lhs.payerNote != rhs.payerNote {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(prepareResponse)
        hasher.combine(useAssetFees)
        hasher.combine(payerNote)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendPaymentRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendPaymentRequest {
        return
            try SendPaymentRequest(
                prepareResponse: FfiConverterTypePrepareSendResponse.read(from: &buf), 
                useAssetFees: FfiConverterOptionBool.read(from: &buf), 
                payerNote: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: SendPaymentRequest, into buf: inout [UInt8]) {
        FfiConverterTypePrepareSendResponse.write(value.prepareResponse, into: &buf)
        FfiConverterOptionBool.write(value.useAssetFees, into: &buf)
        FfiConverterOptionString.write(value.payerNote, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendPaymentRequest_lift(_ buf: RustBuffer) throws -> SendPaymentRequest {
    return try FfiConverterTypeSendPaymentRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendPaymentRequest_lower(_ value: SendPaymentRequest) -> RustBuffer {
    return FfiConverterTypeSendPaymentRequest.lower(value)
}


public struct SendPaymentResponse {
    public var payment: Payment

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(payment: Payment) {
        self.payment = payment
    }
}



extension SendPaymentResponse: Equatable, Hashable {
    public static func ==(lhs: SendPaymentResponse, rhs: SendPaymentResponse) -> Bool {
        if lhs.payment != rhs.payment {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(payment)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendPaymentResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendPaymentResponse {
        return
            try SendPaymentResponse(
                payment: FfiConverterTypePayment.read(from: &buf)
        )
    }

    public static func write(_ value: SendPaymentResponse, into buf: inout [UInt8]) {
        FfiConverterTypePayment.write(value.payment, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendPaymentResponse_lift(_ buf: RustBuffer) throws -> SendPaymentResponse {
    return try FfiConverterTypeSendPaymentResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendPaymentResponse_lower(_ value: SendPaymentResponse) -> RustBuffer {
    return FfiConverterTypeSendPaymentResponse.lower(value)
}


public struct SignMessageRequest {
    public var message: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(message: String) {
        self.message = message
    }
}



extension SignMessageRequest: Equatable, Hashable {
    public static func ==(lhs: SignMessageRequest, rhs: SignMessageRequest) -> Bool {
        if lhs.message != rhs.message {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(message)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignMessageRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignMessageRequest {
        return
            try SignMessageRequest(
                message: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: SignMessageRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.message, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignMessageRequest_lift(_ buf: RustBuffer) throws -> SignMessageRequest {
    return try FfiConverterTypeSignMessageRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignMessageRequest_lower(_ value: SignMessageRequest) -> RustBuffer {
    return FfiConverterTypeSignMessageRequest.lower(value)
}


public struct SignMessageResponse {
    public var signature: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(signature: String) {
        self.signature = signature
    }
}



extension SignMessageResponse: Equatable, Hashable {
    public static func ==(lhs: SignMessageResponse, rhs: SignMessageResponse) -> Bool {
        if lhs.signature != rhs.signature {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(signature)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignMessageResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignMessageResponse {
        return
            try SignMessageResponse(
                signature: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: SignMessageResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.signature, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignMessageResponse_lift(_ buf: RustBuffer) throws -> SignMessageResponse {
    return try FfiConverterTypeSignMessageResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignMessageResponse_lower(_ value: SignMessageResponse) -> RustBuffer {
    return FfiConverterTypeSignMessageResponse.lower(value)
}


public struct Symbol {
    public var grapheme: String?
    public var template: String?
    public var rtl: Bool?
    public var position: UInt32?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(grapheme: String?, template: String?, rtl: Bool?, position: UInt32?) {
        self.grapheme = grapheme
        self.template = template
        self.rtl = rtl
        self.position = position
    }
}



extension Symbol: Equatable, Hashable {
    public static func ==(lhs: Symbol, rhs: Symbol) -> Bool {
        if lhs.grapheme != rhs.grapheme {
            return false
        }
        if lhs.template != rhs.template {
            return false
        }
        if lhs.rtl != rhs.rtl {
            return false
        }
        if lhs.position != rhs.position {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(grapheme)
        hasher.combine(template)
        hasher.combine(rtl)
        hasher.combine(position)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSymbol: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Symbol {
        return
            try Symbol(
                grapheme: FfiConverterOptionString.read(from: &buf), 
                template: FfiConverterOptionString.read(from: &buf), 
                rtl: FfiConverterOptionBool.read(from: &buf), 
                position: FfiConverterOptionUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: Symbol, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.grapheme, into: &buf)
        FfiConverterOptionString.write(value.template, into: &buf)
        FfiConverterOptionBool.write(value.rtl, into: &buf)
        FfiConverterOptionUInt32.write(value.position, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSymbol_lift(_ buf: RustBuffer) throws -> Symbol {
    return try FfiConverterTypeSymbol.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSymbol_lower(_ value: Symbol) -> RustBuffer {
    return FfiConverterTypeSymbol.lower(value)
}


public struct UrlSuccessActionData {
    public var description: String
    public var url: String
    public var matchesCallbackDomain: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(description: String, url: String, matchesCallbackDomain: Bool) {
        self.description = description
        self.url = url
        self.matchesCallbackDomain = matchesCallbackDomain
    }
}



extension UrlSuccessActionData: Equatable, Hashable {
    public static func ==(lhs: UrlSuccessActionData, rhs: UrlSuccessActionData) -> Bool {
        if lhs.description != rhs.description {
            return false
        }
        if lhs.url != rhs.url {
            return false
        }
        if lhs.matchesCallbackDomain != rhs.matchesCallbackDomain {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(description)
        hasher.combine(url)
        hasher.combine(matchesCallbackDomain)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUrlSuccessActionData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UrlSuccessActionData {
        return
            try UrlSuccessActionData(
                description: FfiConverterString.read(from: &buf), 
                url: FfiConverterString.read(from: &buf), 
                matchesCallbackDomain: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: UrlSuccessActionData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.description, into: &buf)
        FfiConverterString.write(value.url, into: &buf)
        FfiConverterBool.write(value.matchesCallbackDomain, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUrlSuccessActionData_lift(_ buf: RustBuffer) throws -> UrlSuccessActionData {
    return try FfiConverterTypeUrlSuccessActionData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUrlSuccessActionData_lower(_ value: UrlSuccessActionData) -> RustBuffer {
    return FfiConverterTypeUrlSuccessActionData.lower(value)
}


public struct WalletInfo {
    public var balanceSat: UInt64
    public var pendingSendSat: UInt64
    public var pendingReceiveSat: UInt64
    public var fingerprint: String
    public var pubkey: String
    public var assetBalances: [AssetBalance]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(balanceSat: UInt64, pendingSendSat: UInt64, pendingReceiveSat: UInt64, fingerprint: String, pubkey: String, assetBalances: [AssetBalance]) {
        self.balanceSat = balanceSat
        self.pendingSendSat = pendingSendSat
        self.pendingReceiveSat = pendingReceiveSat
        self.fingerprint = fingerprint
        self.pubkey = pubkey
        self.assetBalances = assetBalances
    }
}



extension WalletInfo: Equatable, Hashable {
    public static func ==(lhs: WalletInfo, rhs: WalletInfo) -> Bool {
        if lhs.balanceSat != rhs.balanceSat {
            return false
        }
        if lhs.pendingSendSat != rhs.pendingSendSat {
            return false
        }
        if lhs.pendingReceiveSat != rhs.pendingReceiveSat {
            return false
        }
        if lhs.fingerprint != rhs.fingerprint {
            return false
        }
        if lhs.pubkey != rhs.pubkey {
            return false
        }
        if lhs.assetBalances != rhs.assetBalances {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(balanceSat)
        hasher.combine(pendingSendSat)
        hasher.combine(pendingReceiveSat)
        hasher.combine(fingerprint)
        hasher.combine(pubkey)
        hasher.combine(assetBalances)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletInfo {
        return
            try WalletInfo(
                balanceSat: FfiConverterUInt64.read(from: &buf), 
                pendingSendSat: FfiConverterUInt64.read(from: &buf), 
                pendingReceiveSat: FfiConverterUInt64.read(from: &buf), 
                fingerprint: FfiConverterString.read(from: &buf), 
                pubkey: FfiConverterString.read(from: &buf), 
                assetBalances: FfiConverterSequenceTypeAssetBalance.read(from: &buf)
        )
    }

    public static func write(_ value: WalletInfo, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.balanceSat, into: &buf)
        FfiConverterUInt64.write(value.pendingSendSat, into: &buf)
        FfiConverterUInt64.write(value.pendingReceiveSat, into: &buf)
        FfiConverterString.write(value.fingerprint, into: &buf)
        FfiConverterString.write(value.pubkey, into: &buf)
        FfiConverterSequenceTypeAssetBalance.write(value.assetBalances, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletInfo_lift(_ buf: RustBuffer) throws -> WalletInfo {
    return try FfiConverterTypeWalletInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletInfo_lower(_ value: WalletInfo) -> RustBuffer {
    return FfiConverterTypeWalletInfo.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AesSuccessActionDataResult {
    
    case decrypted(data: AesSuccessActionDataDecrypted
    )
    case errorStatus(reason: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAesSuccessActionDataResult: FfiConverterRustBuffer {
    typealias SwiftType = AesSuccessActionDataResult

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AesSuccessActionDataResult {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .decrypted(data: try FfiConverterTypeAesSuccessActionDataDecrypted.read(from: &buf)
        )
        
        case 2: return .errorStatus(reason: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AesSuccessActionDataResult, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .decrypted(data):
            writeInt(&buf, Int32(1))
            FfiConverterTypeAesSuccessActionDataDecrypted.write(data, into: &buf)
            
        
        case let .errorStatus(reason):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(reason, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAesSuccessActionDataResult_lift(_ buf: RustBuffer) throws -> AesSuccessActionDataResult {
    return try FfiConverterTypeAesSuccessActionDataResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAesSuccessActionDataResult_lower(_ value: AesSuccessActionDataResult) -> RustBuffer {
    return FfiConverterTypeAesSuccessActionDataResult.lower(value)
}



extension AesSuccessActionDataResult: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Amount {
    
    case bitcoin(amountMsat: UInt64
    )
    case currency(iso4217Code: String, fractionalAmount: UInt64
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAmount: FfiConverterRustBuffer {
    typealias SwiftType = Amount

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Amount {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bitcoin(amountMsat: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 2: return .currency(iso4217Code: try FfiConverterString.read(from: &buf), fractionalAmount: try FfiConverterUInt64.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Amount, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .bitcoin(amountMsat):
            writeInt(&buf, Int32(1))
            FfiConverterUInt64.write(amountMsat, into: &buf)
            
        
        case let .currency(iso4217Code,fractionalAmount):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(iso4217Code, into: &buf)
            FfiConverterUInt64.write(fractionalAmount, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAmount_lift(_ buf: RustBuffer) throws -> Amount {
    return try FfiConverterTypeAmount.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAmount_lower(_ value: Amount) -> RustBuffer {
    return FfiConverterTypeAmount.lower(value)
}



extension Amount: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BlockchainExplorer {
    
    case electrum(url: String
    )
    case esplora(url: String, useWaterfalls: Bool
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBlockchainExplorer: FfiConverterRustBuffer {
    typealias SwiftType = BlockchainExplorer

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlockchainExplorer {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .electrum(url: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .esplora(url: try FfiConverterString.read(from: &buf), useWaterfalls: try FfiConverterBool.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BlockchainExplorer, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .electrum(url):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(url, into: &buf)
            
        
        case let .esplora(url,useWaterfalls):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(url, into: &buf)
            FfiConverterBool.write(useWaterfalls, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlockchainExplorer_lift(_ buf: RustBuffer) throws -> BlockchainExplorer {
    return try FfiConverterTypeBlockchainExplorer.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlockchainExplorer_lower(_ value: BlockchainExplorer) -> RustBuffer {
    return FfiConverterTypeBlockchainExplorer.lower(value)
}



extension BlockchainExplorer: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BuyBitcoinProvider {
    
    case moonpay
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBuyBitcoinProvider: FfiConverterRustBuffer {
    typealias SwiftType = BuyBitcoinProvider

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BuyBitcoinProvider {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .moonpay
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BuyBitcoinProvider, into buf: inout [UInt8]) {
        switch value {
        
        
        case .moonpay:
            writeInt(&buf, Int32(1))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBuyBitcoinProvider_lift(_ buf: RustBuffer) throws -> BuyBitcoinProvider {
    return try FfiConverterTypeBuyBitcoinProvider.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBuyBitcoinProvider_lower(_ value: BuyBitcoinProvider) -> RustBuffer {
    return FfiConverterTypeBuyBitcoinProvider.lower(value)
}



extension BuyBitcoinProvider: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum GetPaymentRequest {
    
    case paymentHash(paymentHash: String
    )
    case swapId(swapId: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGetPaymentRequest: FfiConverterRustBuffer {
    typealias SwiftType = GetPaymentRequest

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetPaymentRequest {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .paymentHash(paymentHash: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .swapId(swapId: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GetPaymentRequest, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .paymentHash(paymentHash):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(paymentHash, into: &buf)
            
        
        case let .swapId(swapId):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(swapId, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetPaymentRequest_lift(_ buf: RustBuffer) throws -> GetPaymentRequest {
    return try FfiConverterTypeGetPaymentRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetPaymentRequest_lower(_ value: GetPaymentRequest) -> RustBuffer {
    return FfiConverterTypeGetPaymentRequest.lower(value)
}



extension GetPaymentRequest: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum InputType {
    
    case bitcoinAddress(address: BitcoinAddressData
    )
    case liquidAddress(address: LiquidAddressData
    )
    case bolt11(invoice: LnInvoice
    )
    case bolt12Offer(offer: LnOffer, bip353Address: String?
    )
    case nodeId(nodeId: String
    )
    case url(url: String
    )
    case lnUrlPay(data: LnUrlPayRequestData, bip353Address: String?
    )
    case lnUrlWithdraw(data: LnUrlWithdrawRequestData
    )
    case lnUrlAuth(data: LnUrlAuthRequestData
    )
    case lnUrlError(data: LnUrlErrorData
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeInputType: FfiConverterRustBuffer {
    typealias SwiftType = InputType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InputType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bitcoinAddress(address: try FfiConverterTypeBitcoinAddressData.read(from: &buf)
        )
        
        case 2: return .liquidAddress(address: try FfiConverterTypeLiquidAddressData.read(from: &buf)
        )
        
        case 3: return .bolt11(invoice: try FfiConverterTypeLNInvoice.read(from: &buf)
        )
        
        case 4: return .bolt12Offer(offer: try FfiConverterTypeLNOffer.read(from: &buf), bip353Address: try FfiConverterOptionString.read(from: &buf)
        )
        
        case 5: return .nodeId(nodeId: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .url(url: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .lnUrlPay(data: try FfiConverterTypeLnUrlPayRequestData.read(from: &buf), bip353Address: try FfiConverterOptionString.read(from: &buf)
        )
        
        case 8: return .lnUrlWithdraw(data: try FfiConverterTypeLnUrlWithdrawRequestData.read(from: &buf)
        )
        
        case 9: return .lnUrlAuth(data: try FfiConverterTypeLnUrlAuthRequestData.read(from: &buf)
        )
        
        case 10: return .lnUrlError(data: try FfiConverterTypeLnUrlErrorData.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: InputType, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .bitcoinAddress(address):
            writeInt(&buf, Int32(1))
            FfiConverterTypeBitcoinAddressData.write(address, into: &buf)
            
        
        case let .liquidAddress(address):
            writeInt(&buf, Int32(2))
            FfiConverterTypeLiquidAddressData.write(address, into: &buf)
            
        
        case let .bolt11(invoice):
            writeInt(&buf, Int32(3))
            FfiConverterTypeLNInvoice.write(invoice, into: &buf)
            
        
        case let .bolt12Offer(offer,bip353Address):
            writeInt(&buf, Int32(4))
            FfiConverterTypeLNOffer.write(offer, into: &buf)
            FfiConverterOptionString.write(bip353Address, into: &buf)
            
        
        case let .nodeId(nodeId):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(nodeId, into: &buf)
            
        
        case let .url(url):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(url, into: &buf)
            
        
        case let .lnUrlPay(data,bip353Address):
            writeInt(&buf, Int32(7))
            FfiConverterTypeLnUrlPayRequestData.write(data, into: &buf)
            FfiConverterOptionString.write(bip353Address, into: &buf)
            
        
        case let .lnUrlWithdraw(data):
            writeInt(&buf, Int32(8))
            FfiConverterTypeLnUrlWithdrawRequestData.write(data, into: &buf)
            
        
        case let .lnUrlAuth(data):
            writeInt(&buf, Int32(9))
            FfiConverterTypeLnUrlAuthRequestData.write(data, into: &buf)
            
        
        case let .lnUrlError(data):
            writeInt(&buf, Int32(10))
            FfiConverterTypeLnUrlErrorData.write(data, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInputType_lift(_ buf: RustBuffer) throws -> InputType {
    return try FfiConverterTypeInputType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInputType_lower(_ value: InputType) -> RustBuffer {
    return FfiConverterTypeInputType.lower(value)
}



extension InputType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum LiquidNetwork {
    
    case mainnet
    case testnet
    case regtest
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLiquidNetwork: FfiConverterRustBuffer {
    typealias SwiftType = LiquidNetwork

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiquidNetwork {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .mainnet
        
        case 2: return .testnet
        
        case 3: return .regtest
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LiquidNetwork, into buf: inout [UInt8]) {
        switch value {
        
        
        case .mainnet:
            writeInt(&buf, Int32(1))
        
        
        case .testnet:
            writeInt(&buf, Int32(2))
        
        
        case .regtest:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLiquidNetwork_lift(_ buf: RustBuffer) throws -> LiquidNetwork {
    return try FfiConverterTypeLiquidNetwork.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLiquidNetwork_lower(_ value: LiquidNetwork) -> RustBuffer {
    return FfiConverterTypeLiquidNetwork.lower(value)
}



extension LiquidNetwork: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ListPaymentDetails {
    
    case liquid(assetId: String?, destination: String?
    )
    case bitcoin(address: String?
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeListPaymentDetails: FfiConverterRustBuffer {
    typealias SwiftType = ListPaymentDetails

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ListPaymentDetails {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .liquid(assetId: try FfiConverterOptionString.read(from: &buf), destination: try FfiConverterOptionString.read(from: &buf)
        )
        
        case 2: return .bitcoin(address: try FfiConverterOptionString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ListPaymentDetails, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .liquid(assetId,destination):
            writeInt(&buf, Int32(1))
            FfiConverterOptionString.write(assetId, into: &buf)
            FfiConverterOptionString.write(destination, into: &buf)
            
        
        case let .bitcoin(address):
            writeInt(&buf, Int32(2))
            FfiConverterOptionString.write(address, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeListPaymentDetails_lift(_ buf: RustBuffer) throws -> ListPaymentDetails {
    return try FfiConverterTypeListPaymentDetails.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeListPaymentDetails_lower(_ value: ListPaymentDetails) -> RustBuffer {
    return FfiConverterTypeListPaymentDetails.lower(value)
}



extension ListPaymentDetails: Equatable, Hashable {}




public enum LnUrlAuthError {

    
    
    case Generic(err: String
    )
    case InvalidUri(err: String
    )
    case ServiceConnectivity(err: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlAuthError: FfiConverterRustBuffer {
    typealias SwiftType = LnUrlAuthError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlAuthError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            err: try FfiConverterString.read(from: &buf)
            )
        case 2: return .InvalidUri(
            err: try FfiConverterString.read(from: &buf)
            )
        case 3: return .ServiceConnectivity(
            err: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LnUrlAuthError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(err):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .InvalidUri(err):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .ServiceConnectivity(err):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(err, into: &buf)
            
        }
    }
}


extension LnUrlAuthError: Equatable, Hashable {}

extension LnUrlAuthError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum LnUrlCallbackStatus {
    
    case ok
    case errorStatus(data: LnUrlErrorData
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlCallbackStatus: FfiConverterRustBuffer {
    typealias SwiftType = LnUrlCallbackStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlCallbackStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .ok
        
        case 2: return .errorStatus(data: try FfiConverterTypeLnUrlErrorData.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LnUrlCallbackStatus, into buf: inout [UInt8]) {
        switch value {
        
        
        case .ok:
            writeInt(&buf, Int32(1))
        
        
        case let .errorStatus(data):
            writeInt(&buf, Int32(2))
            FfiConverterTypeLnUrlErrorData.write(data, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlCallbackStatus_lift(_ buf: RustBuffer) throws -> LnUrlCallbackStatus {
    return try FfiConverterTypeLnUrlCallbackStatus.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlCallbackStatus_lower(_ value: LnUrlCallbackStatus) -> RustBuffer {
    return FfiConverterTypeLnUrlCallbackStatus.lower(value)
}



extension LnUrlCallbackStatus: Equatable, Hashable {}




public enum LnUrlPayError {

    
    
    case AlreadyPaid
    case Generic(err: String
    )
    case InsufficientBalance(err: String
    )
    case InvalidAmount(err: String
    )
    case InvalidInvoice(err: String
    )
    case InvalidNetwork(err: String
    )
    case InvalidUri(err: String
    )
    case InvoiceExpired(err: String
    )
    case PaymentFailed(err: String
    )
    case PaymentTimeout(err: String
    )
    case RouteNotFound(err: String
    )
    case RouteTooExpensive(err: String
    )
    case ServiceConnectivity(err: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlPayError: FfiConverterRustBuffer {
    typealias SwiftType = LnUrlPayError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlPayError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .AlreadyPaid
        case 2: return .Generic(
            err: try FfiConverterString.read(from: &buf)
            )
        case 3: return .InsufficientBalance(
            err: try FfiConverterString.read(from: &buf)
            )
        case 4: return .InvalidAmount(
            err: try FfiConverterString.read(from: &buf)
            )
        case 5: return .InvalidInvoice(
            err: try FfiConverterString.read(from: &buf)
            )
        case 6: return .InvalidNetwork(
            err: try FfiConverterString.read(from: &buf)
            )
        case 7: return .InvalidUri(
            err: try FfiConverterString.read(from: &buf)
            )
        case 8: return .InvoiceExpired(
            err: try FfiConverterString.read(from: &buf)
            )
        case 9: return .PaymentFailed(
            err: try FfiConverterString.read(from: &buf)
            )
        case 10: return .PaymentTimeout(
            err: try FfiConverterString.read(from: &buf)
            )
        case 11: return .RouteNotFound(
            err: try FfiConverterString.read(from: &buf)
            )
        case 12: return .RouteTooExpensive(
            err: try FfiConverterString.read(from: &buf)
            )
        case 13: return .ServiceConnectivity(
            err: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LnUrlPayError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .AlreadyPaid:
            writeInt(&buf, Int32(1))
        
        
        case let .Generic(err):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .InsufficientBalance(err):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .InvalidAmount(err):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .InvalidInvoice(err):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .InvalidNetwork(err):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .InvalidUri(err):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .InvoiceExpired(err):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .PaymentFailed(err):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .PaymentTimeout(err):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .RouteNotFound(err):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .RouteTooExpensive(err):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .ServiceConnectivity(err):
            writeInt(&buf, Int32(13))
            FfiConverterString.write(err, into: &buf)
            
        }
    }
}


extension LnUrlPayError: Equatable, Hashable {}

extension LnUrlPayError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * /////////////////////////////
 * ///////////////////////////////
 */

public enum LnUrlPayResult {
    
    case endpointSuccess(data: LnUrlPaySuccessData
    )
    case endpointError(data: LnUrlErrorData
    )
    case payError(data: LnUrlPayErrorData
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlPayResult: FfiConverterRustBuffer {
    typealias SwiftType = LnUrlPayResult

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlPayResult {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .endpointSuccess(data: try FfiConverterTypeLnUrlPaySuccessData.read(from: &buf)
        )
        
        case 2: return .endpointError(data: try FfiConverterTypeLnUrlErrorData.read(from: &buf)
        )
        
        case 3: return .payError(data: try FfiConverterTypeLnUrlPayErrorData.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LnUrlPayResult, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .endpointSuccess(data):
            writeInt(&buf, Int32(1))
            FfiConverterTypeLnUrlPaySuccessData.write(data, into: &buf)
            
        
        case let .endpointError(data):
            writeInt(&buf, Int32(2))
            FfiConverterTypeLnUrlErrorData.write(data, into: &buf)
            
        
        case let .payError(data):
            writeInt(&buf, Int32(3))
            FfiConverterTypeLnUrlPayErrorData.write(data, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlPayResult_lift(_ buf: RustBuffer) throws -> LnUrlPayResult {
    return try FfiConverterTypeLnUrlPayResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlPayResult_lower(_ value: LnUrlPayResult) -> RustBuffer {
    return FfiConverterTypeLnUrlPayResult.lower(value)
}



extension LnUrlPayResult: Equatable, Hashable {}




public enum LnUrlWithdrawError {

    
    
    case Generic(err: String
    )
    case InvalidAmount(err: String
    )
    case InvalidInvoice(err: String
    )
    case InvalidUri(err: String
    )
    case ServiceConnectivity(err: String
    )
    case InvoiceNoRoutingHints(err: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlWithdrawError: FfiConverterRustBuffer {
    typealias SwiftType = LnUrlWithdrawError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlWithdrawError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            err: try FfiConverterString.read(from: &buf)
            )
        case 2: return .InvalidAmount(
            err: try FfiConverterString.read(from: &buf)
            )
        case 3: return .InvalidInvoice(
            err: try FfiConverterString.read(from: &buf)
            )
        case 4: return .InvalidUri(
            err: try FfiConverterString.read(from: &buf)
            )
        case 5: return .ServiceConnectivity(
            err: try FfiConverterString.read(from: &buf)
            )
        case 6: return .InvoiceNoRoutingHints(
            err: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LnUrlWithdrawError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(err):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .InvalidAmount(err):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .InvalidInvoice(err):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .InvalidUri(err):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .ServiceConnectivity(err):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(err, into: &buf)
            
        
        case let .InvoiceNoRoutingHints(err):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(err, into: &buf)
            
        }
    }
}


extension LnUrlWithdrawError: Equatable, Hashable {}

extension LnUrlWithdrawError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum LnUrlWithdrawResult {
    
    case ok(data: LnUrlWithdrawSuccessData
    )
    case timeout(data: LnUrlWithdrawSuccessData
    )
    case errorStatus(data: LnUrlErrorData
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLnUrlWithdrawResult: FfiConverterRustBuffer {
    typealias SwiftType = LnUrlWithdrawResult

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnUrlWithdrawResult {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .ok(data: try FfiConverterTypeLnUrlWithdrawSuccessData.read(from: &buf)
        )
        
        case 2: return .timeout(data: try FfiConverterTypeLnUrlWithdrawSuccessData.read(from: &buf)
        )
        
        case 3: return .errorStatus(data: try FfiConverterTypeLnUrlErrorData.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LnUrlWithdrawResult, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .ok(data):
            writeInt(&buf, Int32(1))
            FfiConverterTypeLnUrlWithdrawSuccessData.write(data, into: &buf)
            
        
        case let .timeout(data):
            writeInt(&buf, Int32(2))
            FfiConverterTypeLnUrlWithdrawSuccessData.write(data, into: &buf)
            
        
        case let .errorStatus(data):
            writeInt(&buf, Int32(3))
            FfiConverterTypeLnUrlErrorData.write(data, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlWithdrawResult_lift(_ buf: RustBuffer) throws -> LnUrlWithdrawResult {
    return try FfiConverterTypeLnUrlWithdrawResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLnUrlWithdrawResult_lower(_ value: LnUrlWithdrawResult) -> RustBuffer {
    return FfiConverterTypeLnUrlWithdrawResult.lower(value)
}



extension LnUrlWithdrawResult: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Network {
    
    case bitcoin
    case testnet
    case signet
    case regtest
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNetwork: FfiConverterRustBuffer {
    typealias SwiftType = Network

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Network {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bitcoin
        
        case 2: return .testnet
        
        case 3: return .signet
        
        case 4: return .regtest
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Network, into buf: inout [UInt8]) {
        switch value {
        
        
        case .bitcoin:
            writeInt(&buf, Int32(1))
        
        
        case .testnet:
            writeInt(&buf, Int32(2))
        
        
        case .signet:
            writeInt(&buf, Int32(3))
        
        
        case .regtest:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNetwork_lift(_ buf: RustBuffer) throws -> Network {
    return try FfiConverterTypeNetwork.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNetwork_lower(_ value: Network) -> RustBuffer {
    return FfiConverterTypeNetwork.lower(value)
}



extension Network: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum NwcEvent {
    
    case connectedHandled
    case disconnectedHandled
    case payInvoiceHandled(success: Bool, preimage: String?, feesSat: UInt64?, error: String?
    )
    case listTransactionsHandled
    case getBalanceHandled
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNwcEvent: FfiConverterRustBuffer {
    typealias SwiftType = NwcEvent

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NwcEvent {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .connectedHandled
        
        case 2: return .disconnectedHandled
        
        case 3: return .payInvoiceHandled(success: try FfiConverterBool.read(from: &buf), preimage: try FfiConverterOptionString.read(from: &buf), feesSat: try FfiConverterOptionUInt64.read(from: &buf), error: try FfiConverterOptionString.read(from: &buf)
        )
        
        case 4: return .listTransactionsHandled
        
        case 5: return .getBalanceHandled
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NwcEvent, into buf: inout [UInt8]) {
        switch value {
        
        
        case .connectedHandled:
            writeInt(&buf, Int32(1))
        
        
        case .disconnectedHandled:
            writeInt(&buf, Int32(2))
        
        
        case let .payInvoiceHandled(success,preimage,feesSat,error):
            writeInt(&buf, Int32(3))
            FfiConverterBool.write(success, into: &buf)
            FfiConverterOptionString.write(preimage, into: &buf)
            FfiConverterOptionUInt64.write(feesSat, into: &buf)
            FfiConverterOptionString.write(error, into: &buf)
            
        
        case .listTransactionsHandled:
            writeInt(&buf, Int32(4))
        
        
        case .getBalanceHandled:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNwcEvent_lift(_ buf: RustBuffer) throws -> NwcEvent {
    return try FfiConverterTypeNwcEvent.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNwcEvent_lower(_ value: NwcEvent) -> RustBuffer {
    return FfiConverterTypeNwcEvent.lower(value)
}



extension NwcEvent: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PayAmount {
    
    case bitcoin(receiverAmountSat: UInt64
    )
    case asset(toAsset: String, receiverAmount: Double, estimateAssetFees: Bool?, fromAsset: String?
    )
    case drain
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePayAmount: FfiConverterRustBuffer {
    typealias SwiftType = PayAmount

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PayAmount {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bitcoin(receiverAmountSat: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 2: return .asset(toAsset: try FfiConverterString.read(from: &buf), receiverAmount: try FfiConverterDouble.read(from: &buf), estimateAssetFees: try FfiConverterOptionBool.read(from: &buf), fromAsset: try FfiConverterOptionString.read(from: &buf)
        )
        
        case 3: return .drain
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PayAmount, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .bitcoin(receiverAmountSat):
            writeInt(&buf, Int32(1))
            FfiConverterUInt64.write(receiverAmountSat, into: &buf)
            
        
        case let .asset(toAsset,receiverAmount,estimateAssetFees,fromAsset):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(toAsset, into: &buf)
            FfiConverterDouble.write(receiverAmount, into: &buf)
            FfiConverterOptionBool.write(estimateAssetFees, into: &buf)
            FfiConverterOptionString.write(fromAsset, into: &buf)
            
        
        case .drain:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePayAmount_lift(_ buf: RustBuffer) throws -> PayAmount {
    return try FfiConverterTypePayAmount.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePayAmount_lower(_ value: PayAmount) -> RustBuffer {
    return FfiConverterTypePayAmount.lower(value)
}



extension PayAmount: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PaymentDetails {
    
    case lightning(swapId: String, description: String, liquidExpirationBlockheight: UInt32, preimage: String?, invoice: String?, bolt12Offer: String?, paymentHash: String?, destinationPubkey: String?, lnurlInfo: LnUrlInfo?, bip353Address: String?, payerNote: String?, claimTxId: String?, refundTxId: String?, refundTxAmountSat: UInt64?
    )
    case liquid(assetId: String, destination: String, description: String, assetInfo: AssetInfo?, lnurlInfo: LnUrlInfo?, bip353Address: String?, payerNote: String?
    )
    case bitcoin(swapId: String, bitcoinAddress: String, description: String, autoAcceptedFees: Bool, bitcoinExpirationBlockheight: UInt32?, liquidExpirationBlockheight: UInt32?, lockupTxId: String?, claimTxId: String?, refundTxId: String?, refundTxAmountSat: UInt64?
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePaymentDetails: FfiConverterRustBuffer {
    typealias SwiftType = PaymentDetails

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentDetails {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .lightning(swapId: try FfiConverterString.read(from: &buf), description: try FfiConverterString.read(from: &buf), liquidExpirationBlockheight: try FfiConverterUInt32.read(from: &buf), preimage: try FfiConverterOptionString.read(from: &buf), invoice: try FfiConverterOptionString.read(from: &buf), bolt12Offer: try FfiConverterOptionString.read(from: &buf), paymentHash: try FfiConverterOptionString.read(from: &buf), destinationPubkey: try FfiConverterOptionString.read(from: &buf), lnurlInfo: try FfiConverterOptionTypeLnUrlInfo.read(from: &buf), bip353Address: try FfiConverterOptionString.read(from: &buf), payerNote: try FfiConverterOptionString.read(from: &buf), claimTxId: try FfiConverterOptionString.read(from: &buf), refundTxId: try FfiConverterOptionString.read(from: &buf), refundTxAmountSat: try FfiConverterOptionUInt64.read(from: &buf)
        )
        
        case 2: return .liquid(assetId: try FfiConverterString.read(from: &buf), destination: try FfiConverterString.read(from: &buf), description: try FfiConverterString.read(from: &buf), assetInfo: try FfiConverterOptionTypeAssetInfo.read(from: &buf), lnurlInfo: try FfiConverterOptionTypeLnUrlInfo.read(from: &buf), bip353Address: try FfiConverterOptionString.read(from: &buf), payerNote: try FfiConverterOptionString.read(from: &buf)
        )
        
        case 3: return .bitcoin(swapId: try FfiConverterString.read(from: &buf), bitcoinAddress: try FfiConverterString.read(from: &buf), description: try FfiConverterString.read(from: &buf), autoAcceptedFees: try FfiConverterBool.read(from: &buf), bitcoinExpirationBlockheight: try FfiConverterOptionUInt32.read(from: &buf), liquidExpirationBlockheight: try FfiConverterOptionUInt32.read(from: &buf), lockupTxId: try FfiConverterOptionString.read(from: &buf), claimTxId: try FfiConverterOptionString.read(from: &buf), refundTxId: try FfiConverterOptionString.read(from: &buf), refundTxAmountSat: try FfiConverterOptionUInt64.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentDetails, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .lightning(swapId,description,liquidExpirationBlockheight,preimage,invoice,bolt12Offer,paymentHash,destinationPubkey,lnurlInfo,bip353Address,payerNote,claimTxId,refundTxId,refundTxAmountSat):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(swapId, into: &buf)
            FfiConverterString.write(description, into: &buf)
            FfiConverterUInt32.write(liquidExpirationBlockheight, into: &buf)
            FfiConverterOptionString.write(preimage, into: &buf)
            FfiConverterOptionString.write(invoice, into: &buf)
            FfiConverterOptionString.write(bolt12Offer, into: &buf)
            FfiConverterOptionString.write(paymentHash, into: &buf)
            FfiConverterOptionString.write(destinationPubkey, into: &buf)
            FfiConverterOptionTypeLnUrlInfo.write(lnurlInfo, into: &buf)
            FfiConverterOptionString.write(bip353Address, into: &buf)
            FfiConverterOptionString.write(payerNote, into: &buf)
            FfiConverterOptionString.write(claimTxId, into: &buf)
            FfiConverterOptionString.write(refundTxId, into: &buf)
            FfiConverterOptionUInt64.write(refundTxAmountSat, into: &buf)
            
        
        case let .liquid(assetId,destination,description,assetInfo,lnurlInfo,bip353Address,payerNote):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(assetId, into: &buf)
            FfiConverterString.write(destination, into: &buf)
            FfiConverterString.write(description, into: &buf)
            FfiConverterOptionTypeAssetInfo.write(assetInfo, into: &buf)
            FfiConverterOptionTypeLnUrlInfo.write(lnurlInfo, into: &buf)
            FfiConverterOptionString.write(bip353Address, into: &buf)
            FfiConverterOptionString.write(payerNote, into: &buf)
            
        
        case let .bitcoin(swapId,bitcoinAddress,description,autoAcceptedFees,bitcoinExpirationBlockheight,liquidExpirationBlockheight,lockupTxId,claimTxId,refundTxId,refundTxAmountSat):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(swapId, into: &buf)
            FfiConverterString.write(bitcoinAddress, into: &buf)
            FfiConverterString.write(description, into: &buf)
            FfiConverterBool.write(autoAcceptedFees, into: &buf)
            FfiConverterOptionUInt32.write(bitcoinExpirationBlockheight, into: &buf)
            FfiConverterOptionUInt32.write(liquidExpirationBlockheight, into: &buf)
            FfiConverterOptionString.write(lockupTxId, into: &buf)
            FfiConverterOptionString.write(claimTxId, into: &buf)
            FfiConverterOptionString.write(refundTxId, into: &buf)
            FfiConverterOptionUInt64.write(refundTxAmountSat, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaymentDetails_lift(_ buf: RustBuffer) throws -> PaymentDetails {
    return try FfiConverterTypePaymentDetails.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaymentDetails_lower(_ value: PaymentDetails) -> RustBuffer {
    return FfiConverterTypePaymentDetails.lower(value)
}



extension PaymentDetails: Equatable, Hashable {}




public enum PaymentError {

    
    
    case AlreadyClaimed(message: String)
    
    case AlreadyPaid(message: String)
    
    case PaymentInProgress(message: String)
    
    case AmountOutOfRange(message: String)
    
    case AmountMissing(message: String)
    
    case AssetError(message: String)
    
    case Generic(message: String)
    
    case InvalidOrExpiredFees(message: String)
    
    case InsufficientFunds(message: String)
    
    case InvalidDescription(message: String)
    
    case InvalidInvoice(message: String)
    
    case InvalidNetwork(message: String)
    
    case InvalidPreimage(message: String)
    
    case PairsNotFound(message: String)
    
    case PaymentTimeout(message: String)
    
    case PersistError(message: String)
    
    case ReceiveError(message: String)
    
    case Refunded(message: String)
    
    case SelfTransferNotSupported(message: String)
    
    case SendError(message: String)
    
    case SignerError(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePaymentError: FfiConverterRustBuffer {
    typealias SwiftType = PaymentError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .AlreadyClaimed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .AlreadyPaid(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .PaymentInProgress(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .AmountOutOfRange(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .AmountMissing(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .AssetError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .Generic(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .InvalidOrExpiredFees(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .InsufficientFunds(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .InvalidDescription(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .InvalidInvoice(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .InvalidNetwork(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .InvalidPreimage(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 14: return .PairsNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 15: return .PaymentTimeout(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 16: return .PersistError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 17: return .ReceiveError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 18: return .Refunded(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 19: return .SelfTransferNotSupported(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 20: return .SendError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 21: return .SignerError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .AlreadyClaimed(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .AlreadyPaid(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .PaymentInProgress(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .AmountOutOfRange(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .AmountMissing(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .AssetError(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .Generic(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .InvalidOrExpiredFees(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .InsufficientFunds(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))
        case .InvalidDescription(_ /* message is ignored*/):
            writeInt(&buf, Int32(10))
        case .InvalidInvoice(_ /* message is ignored*/):
            writeInt(&buf, Int32(11))
        case .InvalidNetwork(_ /* message is ignored*/):
            writeInt(&buf, Int32(12))
        case .InvalidPreimage(_ /* message is ignored*/):
            writeInt(&buf, Int32(13))
        case .PairsNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(14))
        case .PaymentTimeout(_ /* message is ignored*/):
            writeInt(&buf, Int32(15))
        case .PersistError(_ /* message is ignored*/):
            writeInt(&buf, Int32(16))
        case .ReceiveError(_ /* message is ignored*/):
            writeInt(&buf, Int32(17))
        case .Refunded(_ /* message is ignored*/):
            writeInt(&buf, Int32(18))
        case .SelfTransferNotSupported(_ /* message is ignored*/):
            writeInt(&buf, Int32(19))
        case .SendError(_ /* message is ignored*/):
            writeInt(&buf, Int32(20))
        case .SignerError(_ /* message is ignored*/):
            writeInt(&buf, Int32(21))

        
        }
    }
}


extension PaymentError: Equatable, Hashable {}

extension PaymentError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PaymentMethod {
    
    case lightning
    case bolt11Invoice
    case bolt12Offer
    case bitcoinAddress
    case liquidAddress
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePaymentMethod: FfiConverterRustBuffer {
    typealias SwiftType = PaymentMethod

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentMethod {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .lightning
        
        case 2: return .bolt11Invoice
        
        case 3: return .bolt12Offer
        
        case 4: return .bitcoinAddress
        
        case 5: return .liquidAddress
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentMethod, into buf: inout [UInt8]) {
        switch value {
        
        
        case .lightning:
            writeInt(&buf, Int32(1))
        
        
        case .bolt11Invoice:
            writeInt(&buf, Int32(2))
        
        
        case .bolt12Offer:
            writeInt(&buf, Int32(3))
        
        
        case .bitcoinAddress:
            writeInt(&buf, Int32(4))
        
        
        case .liquidAddress:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaymentMethod_lift(_ buf: RustBuffer) throws -> PaymentMethod {
    return try FfiConverterTypePaymentMethod.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaymentMethod_lower(_ value: PaymentMethod) -> RustBuffer {
    return FfiConverterTypePaymentMethod.lower(value)
}



extension PaymentMethod: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PaymentState {
    
    case created
    case pending
    case complete
    case failed
    case timedOut
    case refundable
    case refundPending
    case waitingFeeAcceptance
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePaymentState: FfiConverterRustBuffer {
    typealias SwiftType = PaymentState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .created
        
        case 2: return .pending
        
        case 3: return .complete
        
        case 4: return .failed
        
        case 5: return .timedOut
        
        case 6: return .refundable
        
        case 7: return .refundPending
        
        case 8: return .waitingFeeAcceptance
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .created:
            writeInt(&buf, Int32(1))
        
        
        case .pending:
            writeInt(&buf, Int32(2))
        
        
        case .complete:
            writeInt(&buf, Int32(3))
        
        
        case .failed:
            writeInt(&buf, Int32(4))
        
        
        case .timedOut:
            writeInt(&buf, Int32(5))
        
        
        case .refundable:
            writeInt(&buf, Int32(6))
        
        
        case .refundPending:
            writeInt(&buf, Int32(7))
        
        
        case .waitingFeeAcceptance:
            writeInt(&buf, Int32(8))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaymentState_lift(_ buf: RustBuffer) throws -> PaymentState {
    return try FfiConverterTypePaymentState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaymentState_lower(_ value: PaymentState) -> RustBuffer {
    return FfiConverterTypePaymentState.lower(value)
}



extension PaymentState: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PaymentType {
    
    case receive
    case send
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePaymentType: FfiConverterRustBuffer {
    typealias SwiftType = PaymentType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .receive
        
        case 2: return .send
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .receive:
            writeInt(&buf, Int32(1))
        
        
        case .send:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaymentType_lift(_ buf: RustBuffer) throws -> PaymentType {
    return try FfiConverterTypePaymentType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaymentType_lower(_ value: PaymentType) -> RustBuffer {
    return FfiConverterTypePaymentType.lower(value)
}



extension PaymentType: Equatable, Hashable {}




public enum PluginStorageError {

    
    
    case Generic(err: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePluginStorageError: FfiConverterRustBuffer {
    typealias SwiftType = PluginStorageError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PluginStorageError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            err: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PluginStorageError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(err):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(err, into: &buf)
            
        }
    }
}


extension PluginStorageError: Equatable, Hashable {}

extension PluginStorageError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ReceiveAmount {
    
    case bitcoin(payerAmountSat: UInt64
    )
    case asset(assetId: String, payerAmount: Double?
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeReceiveAmount: FfiConverterRustBuffer {
    typealias SwiftType = ReceiveAmount

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ReceiveAmount {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bitcoin(payerAmountSat: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 2: return .asset(assetId: try FfiConverterString.read(from: &buf), payerAmount: try FfiConverterOptionDouble.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ReceiveAmount, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .bitcoin(payerAmountSat):
            writeInt(&buf, Int32(1))
            FfiConverterUInt64.write(payerAmountSat, into: &buf)
            
        
        case let .asset(assetId,payerAmount):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(assetId, into: &buf)
            FfiConverterOptionDouble.write(payerAmount, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeReceiveAmount_lift(_ buf: RustBuffer) throws -> ReceiveAmount {
    return try FfiConverterTypeReceiveAmount.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeReceiveAmount_lower(_ value: ReceiveAmount) -> RustBuffer {
    return FfiConverterTypeReceiveAmount.lower(value)
}



extension ReceiveAmount: Equatable, Hashable {}




/**
 * /////////////////////////////
 */
public enum SdkError {

    
    
    case AlreadyStarted(message: String)
    
    case Generic(message: String)
    
    case NotStarted(message: String)
    
    case ServiceConnectivity(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSdkError: FfiConverterRustBuffer {
    typealias SwiftType = SdkError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SdkError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .AlreadyStarted(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .Generic(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .NotStarted(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .ServiceConnectivity(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SdkError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .AlreadyStarted(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .Generic(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .NotStarted(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .ServiceConnectivity(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))

        
        }
    }
}


extension SdkError: Equatable, Hashable {}

extension SdkError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SdkEvent {
    
    case paymentFailed(details: Payment
    )
    case paymentPending(details: Payment
    )
    case paymentRefundable(details: Payment
    )
    case paymentRefunded(details: Payment
    )
    case paymentRefundPending(details: Payment
    )
    case paymentSucceeded(details: Payment
    )
    case paymentWaitingConfirmation(details: Payment
    )
    case paymentWaitingFeeAcceptance(details: Payment
    )
    case synced
    case dataSynced(didPullNewRecords: Bool
    )
    case nwc(eventId: String, details: NwcEvent
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSdkEvent: FfiConverterRustBuffer {
    typealias SwiftType = SdkEvent

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SdkEvent {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .paymentFailed(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 2: return .paymentPending(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 3: return .paymentRefundable(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 4: return .paymentRefunded(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 5: return .paymentRefundPending(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 6: return .paymentSucceeded(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 7: return .paymentWaitingConfirmation(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 8: return .paymentWaitingFeeAcceptance(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 9: return .synced
        
        case 10: return .dataSynced(didPullNewRecords: try FfiConverterBool.read(from: &buf)
        )
        
        case 11: return .nwc(eventId: try FfiConverterString.read(from: &buf), details: try FfiConverterTypeNwcEvent.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SdkEvent, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .paymentFailed(details):
            writeInt(&buf, Int32(1))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case let .paymentPending(details):
            writeInt(&buf, Int32(2))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case let .paymentRefundable(details):
            writeInt(&buf, Int32(3))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case let .paymentRefunded(details):
            writeInt(&buf, Int32(4))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case let .paymentRefundPending(details):
            writeInt(&buf, Int32(5))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case let .paymentSucceeded(details):
            writeInt(&buf, Int32(6))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case let .paymentWaitingConfirmation(details):
            writeInt(&buf, Int32(7))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case let .paymentWaitingFeeAcceptance(details):
            writeInt(&buf, Int32(8))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case .synced:
            writeInt(&buf, Int32(9))
        
        
        case let .dataSynced(didPullNewRecords):
            writeInt(&buf, Int32(10))
            FfiConverterBool.write(didPullNewRecords, into: &buf)
            
        
        case let .nwc(eventId,details):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(eventId, into: &buf)
            FfiConverterTypeNwcEvent.write(details, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSdkEvent_lift(_ buf: RustBuffer) throws -> SdkEvent {
    return try FfiConverterTypeSdkEvent.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSdkEvent_lower(_ value: SdkEvent) -> RustBuffer {
    return FfiConverterTypeSdkEvent.lower(value)
}



extension SdkEvent: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SendDestination {
    
    case liquidAddress(addressData: LiquidAddressData, bip353Address: String?
    )
    case bolt11(invoice: LnInvoice, bip353Address: String?
    )
    case bolt12(offer: LnOffer, receiverAmountSat: UInt64, bip353Address: String?
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendDestination: FfiConverterRustBuffer {
    typealias SwiftType = SendDestination

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendDestination {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .liquidAddress(addressData: try FfiConverterTypeLiquidAddressData.read(from: &buf), bip353Address: try FfiConverterOptionString.read(from: &buf)
        )
        
        case 2: return .bolt11(invoice: try FfiConverterTypeLNInvoice.read(from: &buf), bip353Address: try FfiConverterOptionString.read(from: &buf)
        )
        
        case 3: return .bolt12(offer: try FfiConverterTypeLNOffer.read(from: &buf), receiverAmountSat: try FfiConverterUInt64.read(from: &buf), bip353Address: try FfiConverterOptionString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SendDestination, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .liquidAddress(addressData,bip353Address):
            writeInt(&buf, Int32(1))
            FfiConverterTypeLiquidAddressData.write(addressData, into: &buf)
            FfiConverterOptionString.write(bip353Address, into: &buf)
            
        
        case let .bolt11(invoice,bip353Address):
            writeInt(&buf, Int32(2))
            FfiConverterTypeLNInvoice.write(invoice, into: &buf)
            FfiConverterOptionString.write(bip353Address, into: &buf)
            
        
        case let .bolt12(offer,receiverAmountSat,bip353Address):
            writeInt(&buf, Int32(3))
            FfiConverterTypeLNOffer.write(offer, into: &buf)
            FfiConverterUInt64.write(receiverAmountSat, into: &buf)
            FfiConverterOptionString.write(bip353Address, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendDestination_lift(_ buf: RustBuffer) throws -> SendDestination {
    return try FfiConverterTypeSendDestination.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendDestination_lower(_ value: SendDestination) -> RustBuffer {
    return FfiConverterTypeSendDestination.lower(value)
}



extension SendDestination: Equatable, Hashable {}




public enum SignerError {

    
    
    case Generic(err: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignerError: FfiConverterRustBuffer {
    typealias SwiftType = SignerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            err: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SignerError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(err):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(err, into: &buf)
            
        }
    }
}


extension SignerError: Equatable, Hashable {}

extension SignerError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SuccessAction {
    
    case aes(data: AesSuccessActionData
    )
    case message(data: MessageSuccessActionData
    )
    case url(data: UrlSuccessActionData
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSuccessAction: FfiConverterRustBuffer {
    typealias SwiftType = SuccessAction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SuccessAction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .aes(data: try FfiConverterTypeAesSuccessActionData.read(from: &buf)
        )
        
        case 2: return .message(data: try FfiConverterTypeMessageSuccessActionData.read(from: &buf)
        )
        
        case 3: return .url(data: try FfiConverterTypeUrlSuccessActionData.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SuccessAction, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .aes(data):
            writeInt(&buf, Int32(1))
            FfiConverterTypeAesSuccessActionData.write(data, into: &buf)
            
        
        case let .message(data):
            writeInt(&buf, Int32(2))
            FfiConverterTypeMessageSuccessActionData.write(data, into: &buf)
            
        
        case let .url(data):
            writeInt(&buf, Int32(3))
            FfiConverterTypeUrlSuccessActionData.write(data, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSuccessAction_lift(_ buf: RustBuffer) throws -> SuccessAction {
    return try FfiConverterTypeSuccessAction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSuccessAction_lower(_ value: SuccessAction) -> RustBuffer {
    return FfiConverterTypeSuccessAction.lower(value)
}



extension SuccessAction: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SuccessActionProcessed {
    
    case aes(result: AesSuccessActionDataResult
    )
    case message(data: MessageSuccessActionData
    )
    case url(data: UrlSuccessActionData
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSuccessActionProcessed: FfiConverterRustBuffer {
    typealias SwiftType = SuccessActionProcessed

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SuccessActionProcessed {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .aes(result: try FfiConverterTypeAesSuccessActionDataResult.read(from: &buf)
        )
        
        case 2: return .message(data: try FfiConverterTypeMessageSuccessActionData.read(from: &buf)
        )
        
        case 3: return .url(data: try FfiConverterTypeUrlSuccessActionData.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SuccessActionProcessed, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .aes(result):
            writeInt(&buf, Int32(1))
            FfiConverterTypeAesSuccessActionDataResult.write(result, into: &buf)
            
        
        case let .message(data):
            writeInt(&buf, Int32(2))
            FfiConverterTypeMessageSuccessActionData.write(data, into: &buf)
            
        
        case let .url(data):
            writeInt(&buf, Int32(3))
            FfiConverterTypeUrlSuccessActionData.write(data, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSuccessActionProcessed_lift(_ buf: RustBuffer) throws -> SuccessActionProcessed {
    return try FfiConverterTypeSuccessActionProcessed.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSuccessActionProcessed_lower(_ value: SuccessActionProcessed) -> RustBuffer {
    return FfiConverterTypeSuccessActionProcessed.lower(value)
}



extension SuccessActionProcessed: Equatable, Hashable {}






public protocol EventListener : AnyObject {
    
    func onEvent(e: SdkEvent) 
    
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceEventListener {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceEventListener = UniffiVTableCallbackInterfaceEventListener(
        onEvent: { (
            uniffiHandle: UInt64,
            e: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceEventListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onEvent(
                     e: try FfiConverterTypeSdkEvent.lift(e)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceEventListener.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface EventListener: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitEventListener() {
    uniffi_breez_sdk_liquid_bindings_fn_init_callback_vtable_eventlistener(&UniffiCallbackInterfaceEventListener.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterCallbackInterfaceEventListener {
    fileprivate static var handleMap = UniffiHandleMap<EventListener>()
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceEventListener : FfiConverter {
    typealias SwiftType = EventListener
    typealias FfiType = UInt64

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}




public protocol Logger : AnyObject {
    
    func log(l: LogEntry) 
    
}



// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceLogger {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceLogger = UniffiVTableCallbackInterfaceLogger(
        log: { (
            uniffiHandle: UInt64,
            l: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceLogger.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.log(
                     l: try FfiConverterTypeLogEntry.lift(l)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceLogger.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface Logger: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitLogger() {
    uniffi_breez_sdk_liquid_bindings_fn_init_callback_vtable_logger(&UniffiCallbackInterfaceLogger.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterCallbackInterfaceLogger {
    fileprivate static var handleMap = UniffiHandleMap<Logger>()
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceLogger : FfiConverter {
    typealias SwiftType = Logger
    typealias FfiType = UInt64

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}




public protocol Plugin : AnyObject {
    
    func id()  -> String
    
    func onStart(sdk: BindingLiquidSdk, storage: PluginStorage, eventEmitter: PluginEventEmitter) 
    
    func onStop() 
    
}



// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfacePlugin {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfacePlugin = UniffiVTableCallbackInterfacePlugin(
        id: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> String in
                guard let uniffiObj = try? FfiConverterCallbackInterfacePlugin.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.id(
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterString.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onStart: { (
            uniffiHandle: UInt64,
            sdk: UnsafeMutableRawPointer,
            storage: UnsafeMutableRawPointer,
            eventEmitter: UnsafeMutableRawPointer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfacePlugin.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onStart(
                     sdk: try FfiConverterTypeBindingLiquidSdk.lift(sdk),
                     storage: try FfiConverterTypePluginStorage.lift(storage),
                     eventEmitter: try FfiConverterTypePluginEventEmitter.lift(eventEmitter)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        onStop: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfacePlugin.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onStop(
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfacePlugin.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface Plugin: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitPlugin() {
    uniffi_breez_sdk_liquid_bindings_fn_init_callback_vtable_plugin(&UniffiCallbackInterfacePlugin.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterCallbackInterfacePlugin {
    fileprivate static var handleMap = UniffiHandleMap<Plugin>()
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfacePlugin : FfiConverter {
    typealias SwiftType = Plugin
    typealias FfiType = UInt64

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}




public protocol Signer : AnyObject {
    
    func xpub() throws  -> [UInt8]
    
    func deriveXpub(derivationPath: String) throws  -> [UInt8]
    
    func signEcdsa(msg: [UInt8], derivationPath: String) throws  -> [UInt8]
    
    func signEcdsaRecoverable(msg: [UInt8]) throws  -> [UInt8]
    
    func slip77MasterBlindingKey() throws  -> [UInt8]
    
    func hmacSha256(msg: [UInt8], derivationPath: String) throws  -> [UInt8]
    
    func eciesEncrypt(msg: [UInt8]) throws  -> [UInt8]
    
    func eciesDecrypt(msg: [UInt8]) throws  -> [UInt8]
    
}



// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceSigner {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceSigner = UniffiVTableCallbackInterfaceSigner(
        xpub: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [UInt8] in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceSigner.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.xpub(
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceUInt8.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeSignerError.lower
            )
        },
        deriveXpub: { (
            uniffiHandle: UInt64,
            derivationPath: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [UInt8] in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceSigner.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.deriveXpub(
                     derivationPath: try FfiConverterString.lift(derivationPath)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceUInt8.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeSignerError.lower
            )
        },
        signEcdsa: { (
            uniffiHandle: UInt64,
            msg: RustBuffer,
            derivationPath: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [UInt8] in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceSigner.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.signEcdsa(
                     msg: try FfiConverterSequenceUInt8.lift(msg),
                     derivationPath: try FfiConverterString.lift(derivationPath)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceUInt8.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeSignerError.lower
            )
        },
        signEcdsaRecoverable: { (
            uniffiHandle: UInt64,
            msg: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [UInt8] in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceSigner.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.signEcdsaRecoverable(
                     msg: try FfiConverterSequenceUInt8.lift(msg)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceUInt8.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeSignerError.lower
            )
        },
        slip77MasterBlindingKey: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [UInt8] in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceSigner.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.slip77MasterBlindingKey(
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceUInt8.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeSignerError.lower
            )
        },
        hmacSha256: { (
            uniffiHandle: UInt64,
            msg: RustBuffer,
            derivationPath: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [UInt8] in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceSigner.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.hmacSha256(
                     msg: try FfiConverterSequenceUInt8.lift(msg),
                     derivationPath: try FfiConverterString.lift(derivationPath)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceUInt8.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeSignerError.lower
            )
        },
        eciesEncrypt: { (
            uniffiHandle: UInt64,
            msg: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [UInt8] in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceSigner.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.eciesEncrypt(
                     msg: try FfiConverterSequenceUInt8.lift(msg)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceUInt8.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeSignerError.lower
            )
        },
        eciesDecrypt: { (
            uniffiHandle: UInt64,
            msg: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [UInt8] in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceSigner.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.eciesDecrypt(
                     msg: try FfiConverterSequenceUInt8.lift(msg)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceUInt8.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeSignerError.lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceSigner.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface Signer: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitSigner() {
    uniffi_breez_sdk_liquid_bindings_fn_init_callback_vtable_signer(&UniffiCallbackInterfaceSigner.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterCallbackInterfaceSigner {
    fileprivate static var handleMap = UniffiHandleMap<Signer>()
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceSigner : FfiConverter {
    typealias SwiftType = Signer
    typealias FfiType = UInt64

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionInt64: FfiConverterRustBuffer {
    typealias SwiftType = Int64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDouble: FfiConverterRustBuffer {
    typealias SwiftType = Double?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDouble.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDouble.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAssetInfo: FfiConverterRustBuffer {
    typealias SwiftType = AssetInfo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAssetInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAssetInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeLnUrlInfo: FfiConverterRustBuffer {
    typealias SwiftType = LnUrlInfo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLnUrlInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLnUrlInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypePayment: FfiConverterRustBuffer {
    typealias SwiftType = Payment?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypePayment.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePayment.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeSymbol: FfiConverterRustBuffer {
    typealias SwiftType = Symbol?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSymbol.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSymbol.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAmount: FfiConverterRustBuffer {
    typealias SwiftType = Amount?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAmount.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAmount.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeListPaymentDetails: FfiConverterRustBuffer {
    typealias SwiftType = ListPaymentDetails?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeListPaymentDetails.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeListPaymentDetails.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypePayAmount: FfiConverterRustBuffer {
    typealias SwiftType = PayAmount?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypePayAmount.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePayAmount.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeReceiveAmount: FfiConverterRustBuffer {
    typealias SwiftType = ReceiveAmount?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeReceiveAmount.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeReceiveAmount.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeSuccessAction: FfiConverterRustBuffer {
    typealias SwiftType = SuccessAction?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSuccessAction.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSuccessAction.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeSuccessActionProcessed: FfiConverterRustBuffer {
    typealias SwiftType = SuccessActionProcessed?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSuccessActionProcessed.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSuccessActionProcessed.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceUInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceUInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeAssetMetadata: FfiConverterRustBuffer {
    typealias SwiftType = [AssetMetadata]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeAssetMetadata.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeAssetMetadata.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeExternalInputParser: FfiConverterRustBuffer {
    typealias SwiftType = [ExternalInputParser]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeExternalInputParser.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeExternalInputParser.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypePaymentState: FfiConverterRustBuffer {
    typealias SwiftType = [PaymentState]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypePaymentState.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypePaymentState.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypePaymentType: FfiConverterRustBuffer {
    typealias SwiftType = [PaymentType]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypePaymentType.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypePaymentType.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceCallbackInterfacePlugin: FfiConverterRustBuffer {
    typealias SwiftType = [Plugin]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceCallbackInterfacePlugin.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceCallbackInterfacePlugin.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAssetBalance: FfiConverterRustBuffer {
    typealias SwiftType = [AssetBalance]

    public static func write(_ value: [AssetBalance], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAssetBalance.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AssetBalance] {
        let len: Int32 = try readInt(&buf)
        var seq = [AssetBalance]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAssetBalance.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAssetMetadata: FfiConverterRustBuffer {
    typealias SwiftType = [AssetMetadata]

    public static func write(_ value: [AssetMetadata], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAssetMetadata.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AssetMetadata] {
        let len: Int32 = try readInt(&buf)
        var seq = [AssetMetadata]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAssetMetadata.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeExternalInputParser: FfiConverterRustBuffer {
    typealias SwiftType = [ExternalInputParser]

    public static func write(_ value: [ExternalInputParser], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeExternalInputParser.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ExternalInputParser] {
        let len: Int32 = try readInt(&buf)
        var seq = [ExternalInputParser]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeExternalInputParser.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeFiatCurrency: FfiConverterRustBuffer {
    typealias SwiftType = [FiatCurrency]

    public static func write(_ value: [FiatCurrency], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFiatCurrency.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [FiatCurrency] {
        let len: Int32 = try readInt(&buf)
        var seq = [FiatCurrency]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeFiatCurrency.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeLnOfferBlindedPath: FfiConverterRustBuffer {
    typealias SwiftType = [LnOfferBlindedPath]

    public static func write(_ value: [LnOfferBlindedPath], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLnOfferBlindedPath.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [LnOfferBlindedPath] {
        let len: Int32 = try readInt(&buf)
        var seq = [LnOfferBlindedPath]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeLnOfferBlindedPath.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeLocaleOverrides: FfiConverterRustBuffer {
    typealias SwiftType = [LocaleOverrides]

    public static func write(_ value: [LocaleOverrides], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLocaleOverrides.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [LocaleOverrides] {
        let len: Int32 = try readInt(&buf)
        var seq = [LocaleOverrides]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeLocaleOverrides.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeLocalizedName: FfiConverterRustBuffer {
    typealias SwiftType = [LocalizedName]

    public static func write(_ value: [LocalizedName], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLocalizedName.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [LocalizedName] {
        let len: Int32 = try readInt(&buf)
        var seq = [LocalizedName]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeLocalizedName.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypePayment: FfiConverterRustBuffer {
    typealias SwiftType = [Payment]

    public static func write(_ value: [Payment], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePayment.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Payment] {
        let len: Int32 = try readInt(&buf)
        var seq = [Payment]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePayment.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeRate: FfiConverterRustBuffer {
    typealias SwiftType = [Rate]

    public static func write(_ value: [Rate], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRate.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Rate] {
        let len: Int32 = try readInt(&buf)
        var seq = [Rate]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRate.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeRefundableSwap: FfiConverterRustBuffer {
    typealias SwiftType = [RefundableSwap]

    public static func write(_ value: [RefundableSwap], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRefundableSwap.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [RefundableSwap] {
        let len: Int32 = try readInt(&buf)
        var seq = [RefundableSwap]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRefundableSwap.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeRouteHint: FfiConverterRustBuffer {
    typealias SwiftType = [RouteHint]

    public static func write(_ value: [RouteHint], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRouteHint.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [RouteHint] {
        let len: Int32 = try readInt(&buf)
        var seq = [RouteHint]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRouteHint.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeRouteHintHop: FfiConverterRustBuffer {
    typealias SwiftType = [RouteHintHop]

    public static func write(_ value: [RouteHintHop], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRouteHintHop.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [RouteHintHop] {
        let len: Int32 = try readInt(&buf)
        var seq = [RouteHintHop]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRouteHintHop.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypePaymentState: FfiConverterRustBuffer {
    typealias SwiftType = [PaymentState]

    public static func write(_ value: [PaymentState], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePaymentState.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PaymentState] {
        let len: Int32 = try readInt(&buf)
        var seq = [PaymentState]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePaymentState.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypePaymentType: FfiConverterRustBuffer {
    typealias SwiftType = [PaymentType]

    public static func write(_ value: [PaymentType], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePaymentType.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PaymentType] {
        let len: Int32 = try readInt(&buf)
        var seq = [PaymentType]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePaymentType.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceCallbackInterfacePlugin: FfiConverterRustBuffer {
    typealias SwiftType = [Plugin]

    public static func write(_ value: [Plugin], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterCallbackInterfacePlugin.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Plugin] {
        let len: Int32 = try readInt(&buf)
        var seq = [Plugin]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterCallbackInterfacePlugin.read(from: &buf))
        }
        return seq
    }
}
public func connect(req: ConnectRequest, plugins: [Plugin]?)throws  -> BindingLiquidSdk {
    return try  FfiConverterTypeBindingLiquidSdk.lift(try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_func_connect(
        FfiConverterTypeConnectRequest.lower(req),
        FfiConverterOptionSequenceCallbackInterfacePlugin.lower(plugins),$0
    )
})
}
public func connectWithSigner(req: ConnectWithSignerRequest, signer: Signer, plugins: [Plugin]?)throws  -> BindingLiquidSdk {
    return try  FfiConverterTypeBindingLiquidSdk.lift(try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_func_connect_with_signer(
        FfiConverterTypeConnectWithSignerRequest.lower(req),
        FfiConverterCallbackInterfaceSigner.lower(signer),
        FfiConverterOptionSequenceCallbackInterfacePlugin.lower(plugins),$0
    )
})
}
public func defaultConfig(network: LiquidNetwork, breezApiKey: String?)throws  -> Config {
    return try  FfiConverterTypeConfig.lift(try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_func_default_config(
        FfiConverterTypeLiquidNetwork.lower(network),
        FfiConverterOptionString.lower(breezApiKey),$0
    )
})
}
public func parseInvoice(input: String)throws  -> LnInvoice {
    return try  FfiConverterTypeLNInvoice.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_func_parse_invoice(
        FfiConverterString.lower(input),$0
    )
})
}
public func setLogger(logger: Logger)throws  {try rustCallWithError(FfiConverterTypeSdkError.lift) {
    uniffi_breez_sdk_liquid_bindings_fn_func_set_logger(
        FfiConverterCallbackInterfaceLogger.lower(logger),$0
    )
}
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_breez_sdk_liquid_bindings_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_func_connect() != 56099) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_func_connect_with_signer() != 22815) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_func_default_config() != 20931) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_func_parse_invoice() != 45284) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_func_set_logger() != 32375) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_accept_payment_proposed_fees() != 57291) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_add_event_listener() != 65289) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_backup() != 3592) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_buy_bitcoin() != 53022) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_check_message() != 64029) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_create_bolt12_invoice() != 30488) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_disconnect() != 37717) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_fetch_fiat_rates() != 61824) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_fetch_lightning_limits() != 61822) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_fetch_onchain_limits() != 51575) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_fetch_payment_proposed_fees() != 45806) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_get_info() != 4290) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_get_payment() != 25832) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_list_fiat_currencies() != 38203) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_list_payments() != 39611) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_list_refundables() != 22886) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_lnurl_auth() != 58655) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_lnurl_pay() != 46650) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_lnurl_withdraw() != 60533) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_parse() != 40166) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_pay_onchain() != 46079) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_prepare_buy_bitcoin() != 26608) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_prepare_lnurl_pay() != 14727) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_prepare_pay_onchain() != 1876) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_prepare_receive_payment() != 28769) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_prepare_refund() != 53467) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_prepare_send_payment() != 1183) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_receive_payment() != 63548) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_recommended_fees() != 23255) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_refund() != 31475) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_register_webhook() != 3912) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_remove_event_listener() != 16569) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_rescan_onchain_swaps() != 14305) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_restore() != 63590) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_send_payment() != 63087) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_sign_message() != 33731) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_sync() != 31783) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_bindingliquidsdk_unregister_webhook() != 34970) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_plugineventemitter_broadcast() != 56428) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_pluginstorage_get_item() != 50949) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_pluginstorage_remove_item() != 35977) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_pluginstorage_set_item() != 49740) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_eventlistener_on_event() != 22441) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_logger_log() != 36218) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_plugin_id() != 19661) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_plugin_on_start() != 26346) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_plugin_on_stop() != 59886) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_signer_xpub() != 36847) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_signer_derive_xpub() != 8680) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_signer_sign_ecdsa() != 48623) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_signer_sign_ecdsa_recoverable() != 263) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_signer_slip77_master_blinding_key() != 9707) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_signer_hmac_sha256() != 40934) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_signer_ecies_encrypt() != 43772) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_sdk_liquid_bindings_checksum_method_signer_ecies_decrypt() != 45851) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitEventListener()
    uniffiCallbackInitLogger()
    uniffiCallbackInitPlugin()
    uniffiCallbackInitSigner()
    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all