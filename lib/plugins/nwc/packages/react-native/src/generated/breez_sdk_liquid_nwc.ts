// This file was autogenerated by some hot garbage in the `uniffi-bindgen-react-native` crate.
// Trust me, you don't want to mess with it!
import nativeModule, {
  type UniffiRustFutureContinuationCallback,
  type UniffiForeignFuture,
  type UniffiForeignFutureStructU8,
  type UniffiForeignFutureCompleteU8,
  type UniffiForeignFutureStructI8,
  type UniffiForeignFutureCompleteI8,
  type UniffiForeignFutureStructU16,
  type UniffiForeignFutureCompleteU16,
  type UniffiForeignFutureStructI16,
  type UniffiForeignFutureCompleteI16,
  type UniffiForeignFutureStructU32,
  type UniffiForeignFutureCompleteU32,
  type UniffiForeignFutureStructI32,
  type UniffiForeignFutureCompleteI32,
  type UniffiForeignFutureStructU64,
  type UniffiForeignFutureCompleteU64,
  type UniffiForeignFutureStructI64,
  type UniffiForeignFutureCompleteI64,
  type UniffiForeignFutureStructF32,
  type UniffiForeignFutureCompleteF32,
  type UniffiForeignFutureStructF64,
  type UniffiForeignFutureCompleteF64,
  type UniffiForeignFutureStructPointer,
  type UniffiForeignFutureCompletePointer,
  type UniffiForeignFutureStructRustBuffer,
  type UniffiForeignFutureCompleteRustBuffer,
  type UniffiForeignFutureStructVoid,
  type UniffiForeignFutureCompleteVoid,
} from './breez_sdk_liquid_nwc-ffi';
import {
  type BindingLiquidSdkInterface,
  type PluginEventEmitterInterface,
  type PluginStorageInterface,
} from './breez_sdk_liquid';
import {
  type FfiConverter,
  type UniffiByteArray,
  type UniffiObjectFactory,
  type UniffiRustArcPtr,
  type UnsafeMutableRawPointer,
  AbstractFfiConverterByteArray,
  FfiConverterArray,
  FfiConverterBool,
  FfiConverterInt32,
  FfiConverterMap,
  FfiConverterObject,
  FfiConverterOptional,
  FfiConverterUInt64,
  RustBuffer,
  UniffiAbstractObject,
  UniffiError,
  UniffiInternalError,
  UniffiRustCaller,
  destructorGuardSymbol,
  pointerLiteralSymbol,
  uniffiCreateFfiConverterString,
  uniffiCreateRecord,
  uniffiTypeNameSymbol,
  variantOrdinalSymbol,
} from 'uniffi-bindgen-react-native';

// Get converters from the other files, if any.
import uniffiBreezSdkLiquidModule from './breez_sdk_liquid';
const {
  FfiConverterTypeBindingLiquidSdk,
  FfiConverterTypePluginEventEmitter,
  FfiConverterTypePluginStorage,
} = uniffiBreezSdkLiquidModule.converters;
const uniffiCaller = new UniffiRustCaller();

const uniffiIsDebug =
  // @ts-ignore -- The process global might not be defined
  typeof process !== 'object' ||
  // @ts-ignore -- The process global might not be defined
  process?.env?.NODE_ENV !== 'production' ||
  false;
// Public interface members begin here.

export type NwcConfig = {
  relayUrls: Array<string> | undefined;
  secretKeyHex: string | undefined;
};

/**
 * Generated factory for {@link NwcConfig} record objects.
 */
export const NwcConfig = (() => {
  const defaults = () => ({});
  const create = (() => {
    return uniffiCreateRecord<NwcConfig, ReturnType<typeof defaults>>(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link NwcConfig}, with defaults specified
     * in Rust, in the {@link breez_sdk_liquid_nwc} crate.
     */
    create,

    /**
     * Create a frozen instance of {@link NwcConfig}, with defaults specified
     * in Rust, in the {@link breez_sdk_liquid_nwc} crate.
     */
    new: create,

    /**
     * Defaults specified in the {@link breez_sdk_liquid_nwc} crate.
     */
    defaults: () => Object.freeze(defaults()) as Partial<NwcConfig>,
  });
})();

const FfiConverterTypeNwcConfig = (() => {
  type TypeName = NwcConfig;
  class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
    read(from: RustBuffer): TypeName {
      return {
        relayUrls: FfiConverterOptionalArrayString.read(from),
        secretKeyHex: FfiConverterOptionalString.read(from),
      };
    }
    write(value: TypeName, into: RustBuffer): void {
      FfiConverterOptionalArrayString.write(value.relayUrls, into);
      FfiConverterOptionalString.write(value.secretKeyHex, into);
    }
    allocationSize(value: TypeName): number {
      return (
        FfiConverterOptionalArrayString.allocationSize(value.relayUrls) +
        FfiConverterOptionalString.allocationSize(value.secretKeyHex)
      );
    }
  }
  return new FFIConverter();
})();

const stringConverter = {
  stringToBytes: (s: string) =>
    uniffiCaller.rustCall((status) =>
      nativeModule().ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer(
        s,
        status
      )
    ),
  bytesToString: (ab: UniffiByteArray) =>
    uniffiCaller.rustCall((status) =>
      nativeModule().ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string(
        ab,
        status
      )
    ),
  stringByteLength: (s: string) =>
    uniffiCaller.rustCall((status) =>
      nativeModule().ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length(
        s,
        status
      )
    ),
};
const FfiConverterString = uniffiCreateFfiConverterString(stringConverter);

// Flat error type: NwcError
export enum NwcError_Tags {
  Generic = 'Generic',
  Persist = 'Persist',
}
export const NwcError = (() => {
  class Generic extends UniffiError {
    /**
     * @private
     * This field is private and should not be used.
     */
    readonly [uniffiTypeNameSymbol]: string = 'NwcError';
    /**
     * @private
     * This field is private and should not be used.
     */
    readonly [variantOrdinalSymbol] = 1;

    public readonly tag = NwcError_Tags.Generic;

    constructor(message: string) {
      super('NwcError', 'Generic', message);
    }

    static instanceOf(e: any): e is Generic {
      return instanceOf(e) && (e as any)[variantOrdinalSymbol] === 1;
    }
  }
  class Persist extends UniffiError {
    /**
     * @private
     * This field is private and should not be used.
     */
    readonly [uniffiTypeNameSymbol]: string = 'NwcError';
    /**
     * @private
     * This field is private and should not be used.
     */
    readonly [variantOrdinalSymbol] = 2;

    public readonly tag = NwcError_Tags.Persist;

    constructor(message: string) {
      super('NwcError', 'Persist', message);
    }

    static instanceOf(e: any): e is Persist {
      return instanceOf(e) && (e as any)[variantOrdinalSymbol] === 2;
    }
  }

  // Utility function which does not rely on instanceof.
  function instanceOf(e: any): e is NwcError {
    return (e as any)[uniffiTypeNameSymbol] === 'NwcError';
  }
  return {
    Generic,
    Persist,
    instanceOf,
  };
})();

// Union type for NwcError error type.

export type NwcError = InstanceType<
  (typeof NwcError)[keyof Omit<typeof NwcError, 'instanceOf'>]
>;

const FfiConverterTypeNwcError = (() => {
  const intConverter = FfiConverterInt32;
  type TypeName = NwcError;
  class FfiConverter extends AbstractFfiConverterByteArray<TypeName> {
    read(from: RustBuffer): TypeName {
      switch (intConverter.read(from)) {
        case 1:
          return new NwcError.Generic(FfiConverterString.read(from));

        case 2:
          return new NwcError.Persist(FfiConverterString.read(from));

        default:
          throw new UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value: TypeName, into: RustBuffer): void {
      const obj = value as any;
      const index = obj[variantOrdinalSymbol] as number;
      intConverter.write(index, into);
    }
    allocationSize(value: TypeName): number {
      return intConverter.allocationSize(0);
    }
  }
  return new FfiConverter();
})();

// FfiConverter for Map<string, string>
const FfiConverterMapStringString = new FfiConverterMap(
  FfiConverterString,
  FfiConverterString
);

export interface BindingNwcServiceInterface {
  addConnectionString(name: string) /*throws*/ : string;
  id(): string;
  listConnectionStrings() /*throws*/ : Map<string, string>;
  onStart(
    sdk: BindingLiquidSdkInterface,
    storage: PluginStorageInterface,
    eventEmitter: PluginEventEmitterInterface
  ): void;
  onStop(): void;
  removeConnectionString(name: string) /*throws*/ : void;
}

export class BindingNwcService
  extends UniffiAbstractObject
  implements BindingNwcServiceInterface
{
  readonly [uniffiTypeNameSymbol] = 'BindingNwcService';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  constructor(config: NwcConfig) {
    super();
    const pointer = uniffiCaller.rustCall(
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_fn_constructor_bindingnwcservice_new(
          FfiConverterTypeNwcConfig.lower(config),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeBindingNwcServiceObjectFactory.bless(pointer);
  }

  public addConnectionString(name: string): string /*throws*/ {
    return FfiConverterString.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeNwcError.lift.bind(
          FfiConverterTypeNwcError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_fn_method_bindingnwcservice_add_connection_string(
            uniffiTypeBindingNwcServiceObjectFactory.clonePointer(this),
            FfiConverterString.lower(name),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public id(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_fn_method_bindingnwcservice_id(
            uniffiTypeBindingNwcServiceObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public listConnectionStrings(): Map<string, string> /*throws*/ {
    return FfiConverterMapStringString.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeNwcError.lift.bind(
          FfiConverterTypeNwcError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_fn_method_bindingnwcservice_list_connection_strings(
            uniffiTypeBindingNwcServiceObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public onStart(
    sdk: BindingLiquidSdkInterface,
    storage: PluginStorageInterface,
    eventEmitter: PluginEventEmitterInterface
  ): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_fn_method_bindingnwcservice_on_start(
          uniffiTypeBindingNwcServiceObjectFactory.clonePointer(this),
          FfiConverterTypeBindingLiquidSdk.lower(sdk),
          FfiConverterTypePluginStorage.lower(storage),
          FfiConverterTypePluginEventEmitter.lower(eventEmitter),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  public onStop(): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_fn_method_bindingnwcservice_on_stop(
          uniffiTypeBindingNwcServiceObjectFactory.clonePointer(this),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  public removeConnectionString(name: string): void /*throws*/ {
    uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeNwcError.lift.bind(
        FfiConverterTypeNwcError
      ),
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_fn_method_bindingnwcservice_remove_connection_string(
          uniffiTypeBindingNwcServiceObjectFactory.clonePointer(this),
          FfiConverterString.lower(name),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeBindingNwcServiceObjectFactory.pointer(this);
      uniffiTypeBindingNwcServiceObjectFactory.freePointer(pointer);
      uniffiTypeBindingNwcServiceObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is BindingNwcService {
    return uniffiTypeBindingNwcServiceObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeBindingNwcServiceObjectFactory: UniffiObjectFactory<BindingNwcServiceInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): BindingNwcServiceInterface {
      const instance = Object.create(BindingNwcService.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'BindingNwcService';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_bindingnwcservice_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: BindingNwcServiceInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: BindingNwcServiceInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_fn_clone_bindingnwcservice(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_fn_free_bindingnwcservice(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is BindingNwcServiceInterface {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'BindingNwcService'
      );
    },
  };
// FfiConverter for BindingNwcServiceInterface
const FfiConverterTypeBindingNwcService = new FfiConverterObject(
  uniffiTypeBindingNwcServiceObjectFactory
);

// FfiConverter for string | undefined
const FfiConverterOptionalString = new FfiConverterOptional(FfiConverterString);

// FfiConverter for Array<string>
const FfiConverterArrayString = new FfiConverterArray(FfiConverterString);

// FfiConverter for Array<string> | undefined
const FfiConverterOptionalArrayString = new FfiConverterOptional(
  FfiConverterArrayString
);

/**
 * This should be called before anything else.
 *
 * It is likely that this is being done for you by the library's `index.ts`.
 *
 * It checks versions of uniffi between when the Rust scaffolding was generated
 * and when the bindings were generated.
 *
 * It also initializes the machinery to enable Rust to talk back to Javascript.
 */
function uniffiEnsureInitialized() {
  // Get the bindings contract version from our ComponentInterface
  const bindingsContractVersion = 26;
  // Get the scaffolding contract version by calling the into the dylib
  const scaffoldingContractVersion =
    nativeModule().ubrn_ffi_breez_sdk_liquid_nwc_uniffi_contract_version();
  if (bindingsContractVersion !== scaffoldingContractVersion) {
    throw new UniffiInternalError.ContractVersionMismatch(
      scaffoldingContractVersion,
      bindingsContractVersion
    );
  }
  if (
    nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_checksum_method_bindingnwcservice_add_connection_string() !==
    33073
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_breez_sdk_liquid_nwc_checksum_method_bindingnwcservice_add_connection_string'
    );
  }
  if (
    nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_checksum_method_bindingnwcservice_id() !==
    2522
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_breez_sdk_liquid_nwc_checksum_method_bindingnwcservice_id'
    );
  }
  if (
    nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_checksum_method_bindingnwcservice_list_connection_strings() !==
    51019
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_breez_sdk_liquid_nwc_checksum_method_bindingnwcservice_list_connection_strings'
    );
  }
  if (
    nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_checksum_method_bindingnwcservice_on_start() !==
    51160
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_breez_sdk_liquid_nwc_checksum_method_bindingnwcservice_on_start'
    );
  }
  if (
    nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_checksum_method_bindingnwcservice_on_stop() !==
    27970
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_breez_sdk_liquid_nwc_checksum_method_bindingnwcservice_on_stop'
    );
  }
  if (
    nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_checksum_method_bindingnwcservice_remove_connection_string() !==
    16044
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_breez_sdk_liquid_nwc_checksum_method_bindingnwcservice_remove_connection_string'
    );
  }
  if (
    nativeModule().ubrn_uniffi_breez_sdk_liquid_nwc_checksum_constructor_bindingnwcservice_new() !==
    33635
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_breez_sdk_liquid_nwc_checksum_constructor_bindingnwcservice_new'
    );
  }
}

export default Object.freeze({
  initialize: uniffiEnsureInitialized,
  converters: {
    FfiConverterTypeBindingNwcService,
    FfiConverterTypeNwcConfig,
  },
});
